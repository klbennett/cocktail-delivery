{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport const addFavourite = fav => {\n  initFirebase();\n  firebase.firestore().collection(\"favs\").add({\n    fav: post,\n    idDrink: \"11728\",\n    strDrink: \"Martini\",\n    strCategory: \"Cocktail\",\n    strIBA: \"Unforgettables\",\n    strAlcoholic: true,\n    strGlass: \"Cocktail glass\",\n    ingredients: {\n      \"1\": \"Gin\",\n      \"2\": \"Dry vermouth\",\n      \"3\": \"Olive\"\n    },\n    timestamp: db.firestore.FieldValue.serverTimestamp()\n  }).then(() => {\n    console.log(\"added fav!!\");\n  }).catch(error => {\n    console.error(\"Error adding document: \", error);\n  });\n}; //This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\n\nexport const fetchFavs = () => async dispatch => {\n  firebase // .firestore()\n  .collection(\"favs\").orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(snapshot => {\n    let newState = {\n      favs: []\n    };\n    snapshot.forEach(function (doc) {\n      newState.posts.push({\n        id: doc.id,\n        post: doc.data().post\n      });\n    });\n    dispatch({\n      type: FETCH_POSTS,\n      payload: newState\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","firestore","collection","add","post","idDrink","strDrink","strCategory","strIBA","strAlcoholic","strGlass","ingredients","timestamp","db","FieldValue","serverTimestamp","then","console","log","catch","error","fetchFavs","dispatch","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","posts","push","id","data","type","FETCH_POSTS","payload"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAS;AACnCF,EAAAA,YAAY;AACZD,EAAAA,QAAQ,CACLI,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHH,IAAAA,GAAG,EAAEI,IADF;AAEHC,IAAAA,OAAO,EAAE,OAFN;AAGHC,IAAAA,QAAQ,EAAE,SAHP;AAIHC,IAAAA,WAAW,EAAE,UAJV;AAKHC,IAAAA,MAAM,EAAE,gBALL;AAMHC,IAAAA,YAAY,EAAE,IANX;AAOHC,IAAAA,QAAQ,EAAE,gBAPP;AAQHC,IAAAA,WAAW,EAAE;AACX,WAAK,KADM;AAEX,WAAK,cAFM;AAGX,WAAK;AAHM,KARV;AAaHC,IAAAA,SAAS,EAAEC,EAAE,CAACZ,SAAH,CAAaa,UAAb,CAAwBC,eAAxB;AAbR,GAHP,EAkBGC,IAlBH,CAkBQ,MAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GApBH,EAqBGC,KArBH,CAqBUC,KAAD,IAAW;AAChBH,IAAAA,OAAO,CAACG,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,GAvBH;AAwBD,CA1BM,C,CA4BP;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjDzB,EAAAA,QAAQ,CACN;AADM,GAELK,UAFH,CAEc,MAFd,EAGGqB,OAHH,CAGW,WAHX,EAGwB,MAHxB,EAIGC,KAJH,CAIS,EAJT,EAKGC,UALH,CAKeC,QAAD,IAAc;AACxB,QAAIC,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAAE;AADO,KAAf;AAIAF,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,MAAAA,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAoB;AAClBC,QAAAA,EAAE,EAAEH,GAAG,CAACG,EADU;AAElB7B,QAAAA,IAAI,EAAE0B,GAAG,CAACI,IAAJ,GAAW9B;AAFC,OAApB;AAID,KALD;AAOAkB,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAEC,WADC;AAEPC,MAAAA,OAAO,EAAEV;AAFF,KAAD,CAAR;AAID,GArBH;AAsBD,CAvBM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n  firebase\n    .firestore()\n    .collection(\"favs\")\n    .add({\n      fav: post,\n      idDrink: \"11728\",\n      strDrink: \"Martini\",\n      strCategory: \"Cocktail\",\n      strIBA: \"Unforgettables\",\n      strAlcoholic: true,\n      strGlass: \"Cocktail glass\",\n      ingredients: {\n        \"1\": \"Gin\",\n        \"2\": \"Dry vermouth\",\n        \"3\": \"Olive\",\n      },\n      timestamp: db.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(() => {\n      console.log(\"added fav!!\");\n    })\n    .catch((error) => {\n      console.error(\"Error adding document: \", error);\n    });\n};\n\n//This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\nexport const fetchFavs = () => async (dispatch) => {\n  firebase\n    // .firestore()\n    .collection(\"favs\")\n    .orderBy(\"timestamp\", \"desc\")\n    .limit(50)\n    .onSnapshot((snapshot) => {\n      let newState = {\n        favs: [],\n      };\n\n      snapshot.forEach(function (doc) {\n        newState.posts.push({\n          id: doc.id,\n          post: doc.data().post,\n        });\n      });\n\n      dispatch({\n        type: FETCH_POSTS,\n        payload: newState,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}