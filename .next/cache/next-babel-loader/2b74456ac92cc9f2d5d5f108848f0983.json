{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var fetchFavourites = function fetchFavourites() {\n  initFirebase();\n  var userId = firebase.auth().currentUser.uid;\n  firebase.firestore().collection(\"favs\").where(\"user\", \"==\", user.uid).get().orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(function (snapshot) {\n    var newState = {\n      favs: []\n    };\n    snapshot.forEach(function (doc) {\n      newState.favs.push({\n        id: doc.id,\n        fav: doc.data().fav\n      });\n      console.log(newState);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","console","log","auth","currentUser","userId","uid","firestore","collection","add","user","timestamp","FieldValue","serverTimestamp","then","error","fetchFavourites","where","get","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","push","id","data"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCF,EAAAA,YAAY;AAEZG,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAAT,GAAgBC,WAA5B;;AACA,MAAIP,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAT,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEL,MADH;AAEHL,MAAAA,GAAG,EAAEA,GAFF;AAGHW,MAAAA,SAAS,EAAEd,QAAQ,CAACU,SAAT,CAAmBK,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGC,IARH,CAQQ,YAAM;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACa,KAAD,EAAW;AAChBd,MAAAA,OAAO,CAACc,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLd,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnClB,EAAAA,YAAY;AACZ,MAAMO,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AAEAT,EAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGS,KAHH,CAGS,MAHT,EAGiB,IAHjB,EAGuBP,IAAI,CAACJ,GAH5B,EAIGY,GAJH,GAKGC,OALH,CAKW,WALX,EAKwB,MALxB,EAMGC,KANH,CAMS,EANT,EAOGC,UAPH,CAOc,UAACC,QAAD,EAAc;AACxB,QAAIC,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAAE;AADO,KAAf;AAIAF,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,MAAAA,QAAQ,CAACC,IAAT,CAAcG,IAAd,CAAmB;AACjBC,QAAAA,EAAE,EAAEF,GAAG,CAACE,EADS;AAEjB5B,QAAAA,GAAG,EAAE0B,GAAG,CAACG,IAAJ,GAAW7B;AAFC,OAAnB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAZ;AACD,KAND;AAOD,GAnBH;AAoBD,CAxBM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const fetchFavourites = () => {\n  initFirebase();\n  const userId = firebase.auth().currentUser.uid;\n\n  firebase\n    .firestore()\n    .collection(\"favs\")\n    .where(\"user\", \"==\", user.uid)\n    .get()\n    .orderBy(\"timestamp\", \"desc\")\n    .limit(50)\n    .onSnapshot((snapshot) => {\n      let newState = {\n        favs: [],\n      };\n\n      snapshot.forEach(function (doc) {\n        newState.favs.push({\n          id: doc.id,\n          fav: doc.data().fav,\n        });\n        console.log(newState);\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}