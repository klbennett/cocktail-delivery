{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var fetchFavourites = function fetchFavourites() {\n  initFirebase();\n  var doc = db.collection(\"cities\").doc(\"SF\");\n  var observer = doc.onSnapshot(function (docSnapshot) {\n    console.log(\"Received doc snapshot: \".concat(docSnapshot)); // ...\n  }, function (err) {\n    console.log(\"Encountered error: \".concat(err));\n  });\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get(); //   .onSnapshot((snapshot) => {\n    //     let newState = {\n    //       favs: [],\n    //     };\n    //     snapshot.forEach(function (doc) {\n    //       newState.favs.push({\n    //         id: doc.id,\n    //         fav: doc.data().fav,\n    //       });\n    //       console.log(newState);\n    //     });\n    //   });\n  } else {\n    console.log(\"did not work :(\");\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","console","log","auth","currentUser","userId","uid","firestore","collection","add","user","timestamp","FieldValue","serverTimestamp","then","error","fetchFavourites","doc","db","observer","onSnapshot","docSnapshot","err","where","get"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCF,EAAAA,YAAY;AAEZG,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAAT,GAAgBC,WAA5B;;AACA,MAAIP,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAT,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEL,MADH;AAEHL,MAAAA,GAAG,EAAEA,GAFF;AAGHW,MAAAA,SAAS,EAAEd,QAAQ,CAACU,SAAT,CAAmBK,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGC,IARH,CAQQ,YAAM;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACa,KAAD,EAAW;AAChBd,MAAAA,OAAO,CAACc,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLd,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnClB,EAAAA,YAAY;AAEZ,MAAImB,GAAG,GAAGC,EAAE,CAACV,UAAH,CAAc,QAAd,EAAwBS,GAAxB,CAA4B,IAA5B,CAAV;AAEA,MAAIE,QAAQ,GAAGF,GAAG,CAACG,UAAJ,CACb,UAACC,WAAD,EAAiB;AACfpB,IAAAA,OAAO,CAACC,GAAR,kCAAsCmB,WAAtC,GADe,CAEf;AACD,GAJY,EAKb,UAACC,GAAD,EAAS;AACPrB,IAAAA,OAAO,CAACC,GAAR,8BAAkCoB,GAAlC;AACD,GAPY,CAAf;AASArB,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAAT,GAAgBC,WAA5B;;AAEA,MAAIP,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AAEAT,IAAAA,QAAQ,CAACU,SAAT,GAAqBC,UAArB,CAAgC,MAAhC,EAAwCe,KAAxC,CAA8C,MAA9C,EAAsD,IAAtD,EAA4DlB,MAA5D,EAAoEmB,GAApE,GAH+B,CAI/B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAjBD,MAiBO;AACLvB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;AACF,CApCM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const fetchFavourites = () => {\n  initFirebase();\n\n  let doc = db.collection(\"cities\").doc(\"SF\");\n\n  let observer = doc.onSnapshot(\n    (docSnapshot) => {\n      console.log(`Received doc snapshot: ${docSnapshot}`);\n      // ...\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n\n    firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get();\n    //   .onSnapshot((snapshot) => {\n    //     let newState = {\n    //       favs: [],\n    //     };\n\n    //     snapshot.forEach(function (doc) {\n    //       newState.favs.push({\n    //         id: doc.id,\n    //         fav: doc.data().fav,\n    //       });\n    //       console.log(newState);\n    //     });\n    //   });\n  } else {\n    console.log(\"did not work :(\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}