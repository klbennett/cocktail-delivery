{"ast":null,"code":"import commonMiddleware from \"../../utils/middleware/commonMiddleware\";\nimport { verifyIdToken } from \"../../utils/auth/firebaseAdmin\";\n\nconst handler = (req, res) => {\n  if (!req.body) {\n    return res.status(400);\n  }\n\n  const {\n    token\n  } = req.body; // Here, we decode the user's Firebase token and store it in a cookie. Use\n  // express-session (or similar) to store the session data server-side.\n  // An alternative approach is to use Firebase's `createSessionCookie`. See:\n  // https://firebase.google.com/docs/auth/admin/manage-cookies\n  // Firebase docs:\n  //   \"This is a low overhead operation. The public certificates are initially\n  //    queried and cached until they expire. Session cookie verification can be\n  //    done with the cached public certificates without any additional network\n  //    requests.\"\n  // However, in a serverless environment, we shouldn't rely on caching, so\n  // it's possible Firebase's `verifySessionCookie` will make frequent network\n  // requests in a serverless context.\n\n  return verifyIdToken(token).then(decodedToken => {\n    req.session.decodedToken = decodedToken;\n    req.session.token = token;\n    return decodedToken;\n  }).then(decodedToken => {\n    return res.status(200).json({\n      status: true,\n      decodedToken\n    });\n  }).catch(error => {\n    return res.status(500).json({\n      error\n    });\n  });\n};\n\nexport default commonMiddleware(handler);","map":null,"metadata":{},"sourceType":"module"}