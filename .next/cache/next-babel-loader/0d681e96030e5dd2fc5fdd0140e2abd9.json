{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var deleteFavourite = function deleteFavourite(favId) {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    var userFavs = firebase.firestore().collection(\"favs\").where(\"userId\", \"==\", userId).get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        console.log(doc.idDrink); // doc.ref.delete();\n      });\n    }).then(function () {\n      console.log(\"Successfully deleted favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error deleting document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase(); // console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var getFavourites = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var favs, userId, userFavs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            initFirebase();\n\n            if (!firebase.auth().currentUser) {\n              _context.next = 8;\n              break;\n            }\n\n            favs = [];\n            userId = firebase.auth().currentUser.uid;\n            _context.next = 6;\n            return firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                favs.push(doc.data().fav);\n              });\n              console.log(favs);\n              return favs;\n            })[\"catch\"](function (err) {\n              console.log(\"Error getting documents\", err);\n            });\n\n          case 6:\n            userFavs = _context.sent;\n            return _context.abrupt(\"return\", userFavs);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getFavourites() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/kaybennett/Development/react-ecommerce/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","deleteFavourite","favId","auth","currentUser","userId","uid","userFavs","firestore","collection","where","get","then","querySnapshot","forEach","doc","console","log","idDrink","error","addFavourite","fav","add","user","timestamp","FieldValue","serverTimestamp","getFavourites","favs","snapshot","push","data","err"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const deleteFavourite = (favId) => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    const userFavs = firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"userId\", \"==\", userId)\n      .get()\n      .then(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          console.log(doc.idDrink);\n          // doc.ref.delete();\n        });\n      })\n      .then(() => {\n        console.log(\"Successfully deleted favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error deleting document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  // console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = async () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    let favs = [];\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          favs.push(doc.data().fav);\n        });\n        console.log(favs);\n        return favs;\n      })\n      .catch((err) => {\n        console.log(\"Error getting documents\", err);\n      });\n    return userFavs;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}