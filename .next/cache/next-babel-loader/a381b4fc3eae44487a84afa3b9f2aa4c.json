{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/components/CocktailsList.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Card from \"../components/Card\";\nimport PropTypes from \"prop-types\";\nimport CocktailDetail from \"../components/CocktailDetail\";\nimport withAuthUser from \"../utils/pageWrappers/withAuthUser\";\nimport withAuthUserInfo from \"../utils/pageWrappers/withAuthUserInfo\";\n\nfunction CocktailsList(_ref) {\n  _s();\n\n  var _this = this;\n\n  var drinks = _ref.drinks,\n      AuthUserInfo = _ref.AuthUserInfo;\n\n  var _useState = useState(drinks.drinks[0]),\n      selectedDrink = _useState[0],\n      setSelectedDrink = _useState[1];\n\n  var AuthUser = get(AuthUserInfo, \"AuthUser\", null);\n  useEffect(function () {\n    console.log(AuthUserInfo);\n  });\n\n  function setDetailsVisible(id) {\n    var drink = drinks.drinks.find(function (drink) {\n      return drink.idDrink === id;\n    });\n    setSelectedDrink(drink);\n  }\n\n  function saveDrink(id) {\n    // drink is saved to user in Firebase\n    saveSelectedDrink(drink);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    \"class\": \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    \"class\": \"col s12 m8 l9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, drinks.drinks && drinks.drinks.map(function (_ref2) {\n    var idDrink = _ref2.idDrink,\n        strDrinkThumb = _ref2.strDrinkThumb,\n        strDrink = _ref2.strDrink,\n        strIBA = _ref2.strIBA,\n        strAlcoholic = _ref2.strAlcoholic;\n    return __jsx(Card, {\n      id: idDrink,\n      strDrinkThumb: strDrinkThumb,\n      strDrink: strDrink,\n      strIBA: strIBA,\n      strAlcoholic: strAlcoholic,\n      selectDrink: function selectDrink(e) {\n        return setDetailsVisible(idDrink);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    });\n  })), __jsx(\"div\", {\n    \"class\": \"col s12 m4 l3 grey lighten-2 full-height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(CocktailDetail, {\n    selectedDrink: selectedDrink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(CocktailsList, \"OJDOJ9OmVfH7RtYlLXYnXUcV3GA=\");\n\n_c = CocktailsList;\n\nCocktailsList.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var AuthUserInfo, AuthUser, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Get the AuthUserInfo object. This is set in `withAuthUser.js`.\n            // The AuthUserInfo object is available on both the server and client.\n            AuthUserInfo = get(ctx, \"myCustomData.AuthUserInfo\", null);\n            AuthUser = get(AuthUserInfo, \"AuthUser\", null); // You can also get the token (e.g., to authorize a request when fetching data)\n            // const AuthUserToken = get(AuthUserInfo, 'token', null)\n            // You can fetch data here.\n\n            _context.next = 4;\n            return mockFetchData(get(AuthUser, \"id\"));\n\n          case 4:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nCocktailsList.displayName = \"CocktailsList\";\nCocktailsList.propTypes = {\n  AuthUserInfo: PropTypes.shape({\n    AuthUser: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      emailVerified: PropTypes.bool.isRequired\n    }),\n    token: PropTypes.string\n  }),\n  drinks: PropTypes.shape().isRequired\n};\nCocktailsList.defaultProps = {\n  AuthUserInfo: null\n};\nexport default _c3 = withAuthUser(_c2 = withAuthUserInfo(CocktailsList));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CocktailsList\");\n$RefreshReg$(_c2, \"%default%$withAuthUser\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/components/CocktailsList.js"],"names":["React","useState","Card","PropTypes","CocktailDetail","withAuthUser","withAuthUserInfo","CocktailsList","drinks","AuthUserInfo","selectedDrink","setSelectedDrink","AuthUser","get","useEffect","console","log","setDetailsVisible","id","drink","find","idDrink","saveDrink","saveSelectedDrink","map","strDrinkThumb","strDrink","strIBA","strAlcoholic","e","getInitialProps","ctx","mockFetchData","data","displayName","propTypes","shape","string","isRequired","email","emailVerified","bool","token","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;;AAEA,SAASC,aAAT,OAAiD;AAAA;;AAAA;;AAAA,MAAxBC,MAAwB,QAAxBA,MAAwB;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;;AAAA,kBACLR,QAAQ,CAACO,MAAM,CAACA,MAAP,CAAc,CAAd,CAAD,CADH;AAAA,MACxCE,aADwC;AAAA,MACzBC,gBADyB;;AAE/C,MAAMC,QAAQ,GAAGC,GAAG,CAACJ,YAAD,EAAe,UAAf,EAA2B,IAA3B,CAApB;AAEAK,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACD,GAFQ,CAAT;;AAIA,WAASQ,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7B,QAAMC,KAAK,GAAGX,MAAM,CAACA,MAAP,CAAcY,IAAd,CAAmB,UAACD,KAAD;AAAA,aAAWA,KAAK,CAACE,OAAN,KAAkBH,EAA7B;AAAA,KAAnB,CAAd;AACAP,IAAAA,gBAAgB,CAACQ,KAAD,CAAhB;AACD;;AAED,WAASG,SAAT,CAAmBJ,EAAnB,EAAuB;AACrB;AACAK,IAAAA,iBAAiB,CAACJ,KAAD,CAAjB;AACD;;AAED,SACE,4BACE;AAAK,aAAM,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,aAAM,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,MAAM,CAACA,MAAP,IACCA,MAAM,CAACA,MAAP,CAAcgB,GAAd,CACE;AAAA,QAAGH,OAAH,SAAGA,OAAH;AAAA,QAAYI,aAAZ,SAAYA,aAAZ;AAAA,QAA2BC,QAA3B,SAA2BA,QAA3B;AAAA,QAAqCC,MAArC,SAAqCA,MAArC;AAAA,QAA6CC,YAA7C,SAA6CA,YAA7C;AAAA,WACE,MAAC,IAAD;AACE,MAAA,EAAE,EAAEP,OADN;AAEE,MAAA,aAAa,EAAEI,aAFjB;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,MAAM,EAAEC,MAJV;AAKE,MAAA,YAAY,EAAEC,YALhB;AAME,MAAA,WAAW,EAAE,qBAACC,CAAD;AAAA,eAAOZ,iBAAiB,CAACI,OAAD,CAAxB;AAAA,OANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAAA,GADF,CAFJ,CADF,EAgBE;AAAK,aAAM,0CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,aAAa,EAAEX,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBF,CADF,CADF;AAwBD;;GA1CQH,a;;KAAAA,a;;AA4CTA,aAAa,CAACuB,eAAd;AAAA,uEAAgC,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B;AACA;AACMtB,YAAAA,YAHwB,GAGTI,GAAG,CAACkB,GAAD,EAAM,2BAAN,EAAmC,IAAnC,CAHM;AAIxBnB,YAAAA,QAJwB,GAIbC,GAAG,CAACJ,YAAD,EAAe,UAAf,EAA2B,IAA3B,CAJU,EAM9B;AACA;AAEA;;AAT8B;AAAA,mBAUXuB,aAAa,CAACnB,GAAG,CAACD,QAAD,EAAW,IAAX,CAAJ,CAVF;;AAAA;AAUxBqB,YAAAA,IAVwB;AAAA,6CAYvB;AACLA,cAAAA,IAAI,EAAJA;AADK,aAZuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAiBA1B,aAAa,CAAC2B,WAAd,GAA4B,eAA5B;AAEA3B,aAAa,CAAC4B,SAAd,GAA0B;AACxB1B,EAAAA,YAAY,EAAEN,SAAS,CAACiC,KAAV,CAAgB;AAC5BxB,IAAAA,QAAQ,EAAET,SAAS,CAACiC,KAAV,CAAgB;AACxBlB,MAAAA,EAAE,EAAEf,SAAS,CAACkC,MAAV,CAAiBC,UADG;AAExBC,MAAAA,KAAK,EAAEpC,SAAS,CAACkC,MAAV,CAAiBC,UAFA;AAGxBE,MAAAA,aAAa,EAAErC,SAAS,CAACsC,IAAV,CAAeH;AAHN,KAAhB,CADkB;AAM5BI,IAAAA,KAAK,EAAEvC,SAAS,CAACkC;AANW,GAAhB,CADU;AASxB7B,EAAAA,MAAM,EAAEL,SAAS,CAACiC,KAAV,GAAkBE;AATF,CAA1B;AAYA/B,aAAa,CAACoC,YAAd,GAA6B;AAC3BlC,EAAAA,YAAY,EAAE;AADa,CAA7B;AAIA,qBAAeJ,YAAY,OAACC,gBAAgB,CAACC,aAAD,CAAjB,CAA3B","sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"../components/Card\";\nimport PropTypes from \"prop-types\";\nimport CocktailDetail from \"../components/CocktailDetail\";\nimport withAuthUser from \"../utils/pageWrappers/withAuthUser\";\nimport withAuthUserInfo from \"../utils/pageWrappers/withAuthUserInfo\";\n\nfunction CocktailsList({ drinks, AuthUserInfo }) {\n  const [selectedDrink, setSelectedDrink] = useState(drinks.drinks[0]);\n  const AuthUser = get(AuthUserInfo, \"AuthUser\", null);\n\n  useEffect(() => {\n    console.log(AuthUserInfo);\n  });\n\n  function setDetailsVisible(id) {\n    const drink = drinks.drinks.find((drink) => drink.idDrink === id);\n    setSelectedDrink(drink);\n  }\n\n  function saveDrink(id) {\n    // drink is saved to user in Firebase\n    saveSelectedDrink(drink);\n  }\n\n  return (\n    <>\n      <div class=\"row\">\n        <div class=\"col s12 m8 l9\">\n          {drinks.drinks &&\n            drinks.drinks.map(\n              ({ idDrink, strDrinkThumb, strDrink, strIBA, strAlcoholic }) => (\n                <Card\n                  id={idDrink}\n                  strDrinkThumb={strDrinkThumb}\n                  strDrink={strDrink}\n                  strIBA={strIBA}\n                  strAlcoholic={strAlcoholic}\n                  selectDrink={(e) => setDetailsVisible(idDrink)}\n                />\n              )\n            )}\n        </div>\n        <div class=\"col s12 m4 l3 grey lighten-2 full-height\">\n          <CocktailDetail selectedDrink={selectedDrink} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nCocktailsList.getInitialProps = async (ctx) => {\n  // Get the AuthUserInfo object. This is set in `withAuthUser.js`.\n  // The AuthUserInfo object is available on both the server and client.\n  const AuthUserInfo = get(ctx, \"myCustomData.AuthUserInfo\", null);\n  const AuthUser = get(AuthUserInfo, \"AuthUser\", null);\n\n  // You can also get the token (e.g., to authorize a request when fetching data)\n  // const AuthUserToken = get(AuthUserInfo, 'token', null)\n\n  // You can fetch data here.\n  const data = await mockFetchData(get(AuthUser, \"id\"));\n\n  return {\n    data,\n  };\n};\n\nCocktailsList.displayName = \"CocktailsList\";\n\nCocktailsList.propTypes = {\n  AuthUserInfo: PropTypes.shape({\n    AuthUser: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      emailVerified: PropTypes.bool.isRequired,\n    }),\n    token: PropTypes.string,\n  }),\n  drinks: PropTypes.shape().isRequired,\n};\n\nCocktailsList.defaultProps = {\n  AuthUserInfo: null,\n};\n\nexport default withAuthUser(withAuthUserInfo(CocktailsList));\n"]},"metadata":{},"sourceType":"module"}