{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/pages/results.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport useSWR from \"swr\";\nimport { getCocktailData, API_URL } from \"../lib/API\";\nimport fetcher from \"../lib/fetcher\";\nimport CocktailsList from \"../components/CocktailsList\";\nimport { useRouter } from \"next/router\";\nimport mockData from \"../mockData.json\";\nexport default function Results() {\n  return _Results.apply(this, arguments);\n}\n_c2 = Results;\n\nfunction _Results() {\n  var _s = $RefreshSig$();\n\n  _Results = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _useSWR, data, error;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            // const router = useRouter();\n            _useSWR = useSWR(router.query.keyword, API_URL, fetcher), data = _useSWR.data, error = _useSWR.error; // const data = await getCocktailData(router.query.keyword);\n\n            if (!error) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", __jsx(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 15,\n                columnNumber: 21\n              }\n            }, \"failed to load\"));\n\n          case 4:\n            if (data) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", __jsx(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 16,\n                columnNumber: 21\n              }\n            }, \"loading...\"));\n\n          case 6:\n            return _context.abrupt(\"return\", __jsx(CocktailsList, {\n              drinks: mockData,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 18,\n                columnNumber: 10\n              }\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }), \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n    return [useSWR];\n  }));\n  return _Results.apply(this, arguments);\n}\n\n_c = Results;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Results\");\n$RefreshReg$(_c2, \"Results\");","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/pages/results.js"],"names":["React","useSWR","getCocktailData","API_URL","fetcher","CocktailsList","useRouter","mockData","Results","router","query","keyword","data","error"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,YAAzC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,wBAA8BC,OAA9B;AAAA;AAAA;MAA8BA,O;;;;;yEAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACb;AADa,sBAGWP,MAAM,CAACQ,MAAM,CAACC,KAAP,CAAaC,OAAd,EAAuBR,OAAvB,EAAgCC,OAAhC,CAHjB,EAGLQ,IAHK,WAGLA,IAHK,EAGCC,KAHD,WAGCA,KAHD,EAIb;;AAJa,iBAMTA,KANS;AAAA;AAAA;AAAA;;AAAA,6CAMK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCANL;;AAAA;AAAA,gBAORD,IAPQ;AAAA;AAAA;AAAA;;AAAA,6CAOK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAPL;;AAAA;AAAA,6CASN,MAAC,aAAD;AAAe,cAAA,MAAM,EAAEL,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;YAGWN,M;;;;;KAHIO,O","sourcesContent":["import React from \"react\";\nimport useSWR from \"swr\";\nimport { getCocktailData, API_URL } from \"../lib/API\";\nimport fetcher from \"../lib/fetcher\";\nimport CocktailsList from \"../components/CocktailsList\";\nimport { useRouter } from \"next/router\";\nimport mockData from \"../mockData.json\";\n\nexport default async function Results() {\n  // const router = useRouter();\n\n  const { data, error } = useSWR(router.query.keyword, API_URL, fetcher);\n  // const data = await getCocktailData(router.query.keyword);\n\n  if (error) return <div>failed to load</div>;\n  if (!data) return <div>loading...</div>;\n\n  return <CocktailsList drinks={mockData} />;\n}\n"]},"metadata":{},"sourceType":"module"}