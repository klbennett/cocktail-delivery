{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.collection(\"cities\").doc(req.query.name).get().then(function (doc) {\n      res.json(doc.data());\n    })[\"catch\"](function (error) {\n      res.json({\n        error: error\n      });\n    });\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var getFavourites = function getFavourites() {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    console.log(userId);\n    firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(function (doc) {\n      if (!doc.exists) {\n        console.log(\"No such document!\");\n      } else {\n        console.log(\"Document data:\", doc.data());\n      }\n    })[\"catch\"](function (err) {\n      console.log(\"Error getting document\", err);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","console","log","auth","currentUser","userId","uid","collection","doc","req","query","name","get","then","res","json","data","error","firestore","add","user","timestamp","FieldValue","serverTimestamp","getFavourites","where","exists","err"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCF,EAAAA,YAAY;AAEZG,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAAT,GAAgBC,WAA5B;;AACA,MAAIP,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AAEAT,IAAAA,QAAQ,CACLU,UADH,CACc,QADd,EAEGC,GAFH,CAEOC,GAAG,CAACC,KAAJ,CAAUC,IAFjB,EAGGC,GAHH,GAIGC,IAJH,CAIQ,UAACL,GAAD,EAAS;AACbM,MAAAA,GAAG,CAACC,IAAJ,CAASP,GAAG,CAACQ,IAAJ,EAAT;AACD,KANH,WAOS,UAACC,KAAD,EAAW;AAChBH,MAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEE,QAAAA,KAAK,EAALA;AAAF,OAAT;AACD,KATH;AAUApB,IAAAA,QAAQ,CACLqB,SADH,GAEGX,UAFH,CAEc,MAFd,EAGGY,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEf,MADH;AAEHL,MAAAA,GAAG,EAAEA,GAFF;AAGHqB,MAAAA,SAAS,EAAExB,QAAQ,CAACqB,SAAT,CAAmBI,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGV,IARH,CAQQ,YAAM;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACe,KAAD,EAAW;AAChBhB,MAAAA,OAAO,CAACgB,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GA3BD,MA2BO;AACLhB,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAlCM,C,CAoCP;AACA;AACA;;AACA,OAAO,IAAMsB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC1B,EAAAA,YAAY;;AACZ,MAAID,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAEAR,IAAAA,QAAQ,CACLqB,SADH,GAEGX,UAFH,CAEc,MAFd,EAGGkB,KAHH,CAGS,MAHT,EAGiB,IAHjB,EAGuBpB,MAHvB,EAIGO,GAJH,GAKGC,IALH,CAKQ,UAACL,GAAD,EAAS;AACb,UAAI,CAACA,GAAG,CAACkB,MAAT,EAAiB;AACfzB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BM,GAAG,CAACQ,IAAJ,EAA9B;AACD;AACF,KAXH,WAYS,UAACW,GAAD,EAAS;AACd1B,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCyB,GAAtC;AACD,KAdH;AAeD;AACF,CAtBM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n\n    firebase\n      .collection(\"cities\")\n      .doc(req.query.name)\n      .get()\n      .then((doc) => {\n        res.json(doc.data());\n      })\n      .catch((error) => {\n        res.json({ error });\n      });\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    console.log(userId);\n\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((doc) => {\n        if (!doc.exists) {\n          console.log(\"No such document!\");\n        } else {\n          console.log(\"Document data:\", doc.data());\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error getting document\", err);\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}