{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nfirebase.auth().onAuthStateChanged(function (user) {\n  if (user) {// User is signed in.\n  } else {// No user is signed in.\n    }\n});\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var fetchFavourites = function fetchFavourites() {\n  initFirebase();\n  console.log(firebase.auth());\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").where(\"user\", \"==\", user.uid).get().orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(function (snapshot) {\n      var newState = {\n        favs: []\n      };\n      snapshot.forEach(function (doc) {\n        newState.favs.push({\n          id: doc.id,\n          fav: doc.data().fav\n        });\n        console.log(newState);\n      });\n    });\n  } else {\n    console.log(\"did not work :(\");\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","auth","onAuthStateChanged","user","addFavourite","fav","console","log","currentUser","userId","uid","firestore","collection","add","timestamp","FieldValue","serverTimestamp","then","error","fetchFavourites","where","get","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","push","id","data"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEAD,QAAQ,CAACE,IAAT,GAAgBC,kBAAhB,CAAmC,UAAUC,IAAV,EAAgB;AACjD,MAAIA,IAAJ,EAAU,CACR;AACD,GAFD,MAEO,CACL;AACD;AACF,CAND;AAQA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCL,EAAAA,YAAY;AAEZM,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACE,IAAT,GAAgBO,WAA5B;;AACA,MAAIT,QAAQ,CAACE,IAAT,GAAgBO,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGV,QAAQ,CAACE,IAAT,GAAgBO,WAAhB,CAA4BE,GAA3C;AACAX,IAAAA,QAAQ,CACLY,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHV,MAAAA,IAAI,EAAEM,MADH;AAEHJ,MAAAA,GAAG,EAAEA,GAFF;AAGHS,MAAAA,SAAS,EAAEf,QAAQ,CAACY,SAAT,CAAmBI,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGC,IARH,CAQQ,YAAM;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACW,KAAD,EAAW;AAChBZ,MAAAA,OAAO,CAACY,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnCnB,EAAAA,YAAY;AACZM,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACE,IAAT,EAAZ;;AAEA,MAAIF,QAAQ,CAACE,IAAT,GAAgBO,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGV,QAAQ,CAACE,IAAT,GAAgBO,WAAhB,CAA4BE,GAA3C;AAEAX,IAAAA,QAAQ,CACLY,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGQ,KAHH,CAGS,MAHT,EAGiB,IAHjB,EAGuBjB,IAAI,CAACO,GAH5B,EAIGW,GAJH,GAKGC,OALH,CAKW,WALX,EAKwB,MALxB,EAMGC,KANH,CAMS,EANT,EAOGC,UAPH,CAOc,UAACC,QAAD,EAAc;AACxB,UAAIC,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAE;AADO,OAAf;AAIAF,MAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,QAAAA,QAAQ,CAACC,IAAT,CAAcG,IAAd,CAAmB;AACjBC,UAAAA,EAAE,EAAEF,GAAG,CAACE,EADS;AAEjB1B,UAAAA,GAAG,EAAEwB,GAAG,CAACG,IAAJ,GAAW3B;AAFC,SAAnB;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAYmB,QAAZ;AACD,OAND;AAOD,KAnBH;AAoBD,GAvBD,MAuBO;AACLpB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;AACF,CA9BM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nfirebase.auth().onAuthStateChanged(function (user) {\n  if (user) {\n    // User is signed in.\n  } else {\n    // No user is signed in.\n  }\n});\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const fetchFavourites = () => {\n  initFirebase();\n  console.log(firebase.auth());\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", user.uid)\n      .get()\n      .orderBy(\"timestamp\", \"desc\")\n      .limit(50)\n      .onSnapshot((snapshot) => {\n        let newState = {\n          favs: [],\n        };\n\n        snapshot.forEach(function (doc) {\n          newState.favs.push({\n            id: doc.id,\n            fav: doc.data().fav,\n          });\n          console.log(newState);\n        });\n      });\n  } else {\n    console.log(\"did not work :(\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}