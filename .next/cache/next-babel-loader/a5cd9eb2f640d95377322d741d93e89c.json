{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase(); // console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var getFavourites = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var userId, favs, userFavs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            initFirebase();\n            console.log(firebase.auth().currentUser);\n\n            if (!firebase.auth().currentUser) {\n              _context.next = 11;\n              break;\n            }\n\n            console.log(\"get favourites called\");\n            userId = firebase.auth().currentUser.uid;\n            favs = 2;\n            _context.next = 8;\n            return firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                favs.push(doc.data().fav);\n              });\n              console.log(favs);\n            })[\"catch\"](function (err) {\n              console.log(\"Error getting documents\", err);\n            });\n\n          case 8:\n            userFavs = _context.sent;\n            console.log(\"got here\");\n            return _context.abrupt(\"return\", userFavs);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getFavourites() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","auth","currentUser","userId","uid","firestore","collection","add","user","timestamp","FieldValue","serverTimestamp","then","console","log","error","getFavourites","favs","where","get","snapshot","forEach","doc","push","data","err","userFavs"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCF,EAAAA,YAAY,GADuB,CAGnC;;AACA,MAAID,QAAQ,CAACI,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGN,QAAQ,CAACI,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAP,IAAAA,QAAQ,CACLQ,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEL,MADH;AAEHH,MAAAA,GAAG,EAAEA,GAFF;AAGHS,MAAAA,SAAS,EAAEZ,QAAQ,CAACQ,SAAT,CAAmBK,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGC,IARH,CAQQ,YAAM;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACC,KAAD,EAAW;AAChBF,MAAAA,OAAO,CAACE,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLF,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,IAAME,aAAa;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BlB,YAAAA,YAAY;AAEZe,YAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAQ,CAACI,IAAT,GAAgBC,WAA5B;;AAH2B,iBAIvBL,QAAQ,CAACI,IAAT,GAAgBC,WAJO;AAAA;AAAA;AAAA;;AAKzBW,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEMX,YAAAA,MAPmB,GAOVN,QAAQ,CAACI,IAAT,GAAgBC,WAAhB,CAA4BE,GAPlB;AAQrBa,YAAAA,IARqB,GAQd,CARc;AAAA;AAAA,mBASFpB,QAAQ,CAC5BQ,SADoB,GAEpBC,UAFoB,CAET,MAFS,EAGpBY,KAHoB,CAGd,MAHc,EAGN,IAHM,EAGAf,MAHA,EAIpBgB,GAJoB,GAKpBP,IALoB,CAKf,UAACQ,QAAD,EAAc;AAClBA,cAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBL,gBAAAA,IAAI,CAACM,IAAL,CAAUD,GAAG,CAACE,IAAJ,GAAWxB,GAArB;AACD,eAFD;AAGAa,cAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,aAVoB,WAWd,UAACQ,GAAD,EAAS;AACdZ,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCW,GAAvC;AACD,aAboB,CATE;;AAAA;AASnBC,YAAAA,QATmB;AAuBzBb,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAvByB,6CAwBlBY,QAxBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbV,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  // console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = async () => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    console.log(\"get favourites called\");\n\n    const userId = firebase.auth().currentUser.uid;\n    let favs = 2;\n    const userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          favs.push(doc.data().fav);\n        });\n        console.log(favs);\n      })\n      .catch((err) => {\n        console.log(\"Error getting documents\", err);\n      });\n    console.log(\"got here\");\n    return userFavs;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}