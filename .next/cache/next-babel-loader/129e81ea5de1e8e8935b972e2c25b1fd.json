{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kaybennett/Development/react-ecommerce/nextjs-blog/nextjs-blog/components/FirebaseAuth.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport cookie from \"js-cookie\";\nimport initFirebase from \"../utils/auth/initFirebase\"; // Init the Firebase app.\n\ninitFirebase();\nvar firebaseAuthConfig = {\n  signInFlow: \"popup\",\n  // Auth providers\n  // https://github.com/firebase/firebaseui-web#configure-oauth-providers\n  signInOptions: [{\n    provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    requireDisplayName: false\n  }],\n  signInSuccessUrl: \"/\",\n  credentialHelper: \"none\",\n  callbacks: {\n    signInSuccessWithAuthResult: function () {\n      var _signInSuccessWithAuthResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, redirectUrl) {\n        var user, uid, email, xa, userData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = _ref.user;\n                // xa is the access token, which can be retrieved through\n                // firebase.auth().currentUser.getIdToken()\n                uid = user.uid, email = user.email, xa = user.xa;\n                userData = {\n                  id: uid,\n                  email: email,\n                  token: xa\n                };\n                cookie.set(\"auth\", userData, {\n                  expires: 1\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function signInSuccessWithAuthResult(_x, _x2) {\n        return _signInSuccessWithAuthResult.apply(this, arguments);\n      }\n\n      return signInSuccessWithAuthResult;\n    }()\n  }\n};\n\nvar FirebaseAuth = function FirebaseAuth() {\n  _s();\n\n  // Do not SSR FirebaseUI, because it is not supported.\n  // https://github.com/firebase/firebaseui-web/issues/213\n  var _useState = useState(false),\n      renderAuth = _useState[0],\n      setRenderAuth = _useState[1];\n\n  useEffect(function () {\n    if (true) {\n      setRenderAuth(true);\n    }\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, renderAuth ? __jsx(StyledFirebaseAuth, {\n    uiConfig: firebaseAuthConfig,\n    firebaseAuth: firebase.auth(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\n_s(FirebaseAuth, \"Ar4U5ouqJl2OrtUFwf+zJoqK0bA=\");\n\n_c = FirebaseAuth;\nexport default FirebaseAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuth\");","map":{"version":3,"sources":["/Users/kaybennett/Development/react-ecommerce/nextjs-blog/nextjs-blog/components/FirebaseAuth.js"],"names":["useEffect","useState","StyledFirebaseAuth","firebase","cookie","initFirebase","firebaseAuthConfig","signInFlow","signInOptions","provider","auth","EmailAuthProvider","PROVIDER_ID","requireDisplayName","signInSuccessUrl","credentialHelper","callbacks","signInSuccessWithAuthResult","redirectUrl","user","uid","email","xa","userData","id","token","set","expires","FirebaseAuth","renderAuth","setRenderAuth"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB,C,CAEA;;AACAA,YAAY;AAEZ,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,UAAU,EAAE,OADa;AAEzB;AACA;AACAC,EAAAA,aAAa,EAAE,CACb;AACEC,IAAAA,QAAQ,EAAEN,QAAQ,CAACO,IAAT,CAAcC,iBAAd,CAAgCC,WAD5C;AAEEC,IAAAA,kBAAkB,EAAE;AAFtB,GADa,CAJU;AAUzBC,EAAAA,gBAAgB,EAAE,GAVO;AAWzBC,EAAAA,gBAAgB,EAAE,MAXO;AAYzBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,2BAA2B;AAAA,kGAAE,uBAAiBC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,gBAAAA,IAAT,QAASA,IAAT;AAC3B;AACA;AACQC,gBAAAA,GAHmB,GAGAD,IAHA,CAGnBC,GAHmB,EAGdC,KAHc,GAGAF,IAHA,CAGdE,KAHc,EAGPC,EAHO,GAGAH,IAHA,CAGPG,EAHO;AAIrBC,gBAAAA,QAJqB,GAIV;AACfC,kBAAAA,EAAE,EAAEJ,GADW;AAEfC,kBAAAA,KAAK,EAALA,KAFe;AAGfI,kBAAAA,KAAK,EAAEH;AAHQ,iBAJU;AAS3BlB,gBAAAA,MAAM,CAACsB,GAAP,CAAW,MAAX,EAAmBH,QAAnB,EAA6B;AAC3BI,kBAAAA,OAAO,EAAE;AADkB,iBAA7B;;AAT2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADlB;AAZc,CAA3B;;AA6BA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACzB;AACA;AAFyB,kBAGW3B,QAAQ,CAAC,KAAD,CAHnB;AAAA,MAGlB4B,UAHkB;AAAA,MAGNC,aAHM;;AAIzB9B,EAAAA,SAAS,CAAC,YAAM;AACd,cAAmC;AACjC8B,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAKA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,UAAU,GACT,MAAC,kBAAD;AACE,IAAA,QAAQ,EAAEvB,kBADZ;AAEE,IAAA,YAAY,EAAEH,QAAQ,CAACO,IAAT,EAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,GAKP,IANN,CADF;AAUD,CAnBD;;GAAMkB,Y;;KAAAA,Y;AAqBN,eAAeA,YAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport cookie from \"js-cookie\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\n// Init the Firebase app.\ninitFirebase();\n\nconst firebaseAuthConfig = {\n  signInFlow: \"popup\",\n  // Auth providers\n  // https://github.com/firebase/firebaseui-web#configure-oauth-providers\n  signInOptions: [\n    {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      requireDisplayName: false,\n    },\n  ],\n  signInSuccessUrl: \"/\",\n  credentialHelper: \"none\",\n  callbacks: {\n    signInSuccessWithAuthResult: async ({ user }, redirectUrl) => {\n      // xa is the access token, which can be retrieved through\n      // firebase.auth().currentUser.getIdToken()\n      const { uid, email, xa } = user;\n      const userData = {\n        id: uid,\n        email,\n        token: xa,\n      };\n      cookie.set(\"auth\", userData, {\n        expires: 1,\n      });\n    },\n  },\n};\n\nconst FirebaseAuth = () => {\n  // Do not SSR FirebaseUI, because it is not supported.\n  // https://github.com/firebase/firebaseui-web/issues/213\n  const [renderAuth, setRenderAuth] = useState(false);\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      setRenderAuth(true);\n    }\n  }, []);\n  return (\n    <div>\n      {renderAuth ? (\n        <StyledFirebaseAuth\n          uiConfig={firebaseAuthConfig}\n          firebaseAuth={firebase.auth()}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default FirebaseAuth;\n"]},"metadata":{},"sourceType":"module"}