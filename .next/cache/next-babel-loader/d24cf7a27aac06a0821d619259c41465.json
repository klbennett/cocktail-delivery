{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var getFavourites = function getFavourites() {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    console.log(userId);\n    firebase.firestore().collection(\"favs\").get().where(\"user\", \"==\", userId).then(function (snapshot) {\n      snapshot.forEach(function (doc) {\n        console.log(doc.id, \"=>\", doc.data());\n      });\n    })[\"catch\"](function (err) {\n      console.log(\"Error getting documents\", err);\n    });\n    firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(function (doc) {\n      if (!doc.exists) {\n        console.log(\"No such document!\");\n      } else {\n        console.log(\"Document data:\", doc.data());\n      }\n    })[\"catch\"](function (err) {\n      console.log(\"Error getting document\", err);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","console","log","auth","currentUser","userId","uid","firestore","collection","add","user","timestamp","FieldValue","serverTimestamp","then","error","getFavourites","get","where","snapshot","forEach","doc","id","data","err","exists"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCF,EAAAA,YAAY;AAEZG,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAAT,GAAgBC,WAA5B;;AACA,MAAIP,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAT,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEL,MADH;AAEHL,MAAAA,GAAG,EAAEA,GAFF;AAGHW,MAAAA,SAAS,EAAEd,QAAQ,CAACU,SAAT,CAAmBK,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGC,IARH,CAQQ,YAAM;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACa,KAAD,EAAW;AAChBd,MAAAA,OAAO,CAACc,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLd,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjClB,EAAAA,YAAY;;AACZ,MAAID,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAEAR,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGS,GAHH,GAIGC,KAJH,CAIS,MAJT,EAIiB,IAJjB,EAIuBb,MAJvB,EAMGS,IANH,CAMQ,UAACK,QAAD,EAAc;AAClBA,MAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBpB,QAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAG,CAACC,EAAhB,EAAoB,IAApB,EAA0BD,GAAG,CAACE,IAAJ,EAA1B;AACD,OAFD;AAGD,KAVH,WAWS,UAACC,GAAD,EAAS;AACdvB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCsB,GAAvC;AACD,KAbH;AAeA3B,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGU,KAHH,CAGS,MAHT,EAGiB,IAHjB,EAGuBb,MAHvB,EAIGY,GAJH,GAKGH,IALH,CAKQ,UAACO,GAAD,EAAS;AACb,UAAI,CAACA,GAAG,CAACI,MAAT,EAAiB;AACfxB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BmB,GAAG,CAACE,IAAJ,EAA9B;AACD;AACF,KAXH,WAYS,UAACC,GAAD,EAAS;AACdvB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCsB,GAAtC;AACD,KAdH;AAeD;AACF,CArCM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    console.log(userId);\n\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .get()\n      .where(\"user\", \"==\", userId)\n\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          console.log(doc.id, \"=>\", doc.data());\n        });\n      })\n      .catch((err) => {\n        console.log(\"Error getting documents\", err);\n      });\n\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((doc) => {\n        if (!doc.exists) {\n          console.log(\"No such document!\");\n        } else {\n          console.log(\"Document data:\", doc.data());\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error getting document\", err);\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}