{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/utils/pageWrappers/withAuthUser.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { get, set } from \"lodash/object\";\nimport { AuthUserInfoContext, useFirebaseAuth } from \"../auth/hooks\";\nimport { createAuthUser, createAuthUserInfo } from \"../auth/user\"; // Gets the authenticated user from the Firebase JS SDK, when client-side,\n// or from the request object, when server-side. Add the AuthUserInfo to\n// context.\n\nexport default function withAuthUser(ComposedComponent) {\n  var _this = this,\n      _s = $RefreshSig$();\n\n  var WithAuthUserComp = function WithAuthUserComp(props) {\n    _s();\n\n    console.log(props);\n\n    var AuthUserInfo = props.AuthUserInfo,\n        otherProps = _objectWithoutProperties(props, [\"AuthUserInfo\"]); // We'll use the authed user from client-side auth (Firebase JS SDK)\n    // when available. On the server side, we'll use the authed user from\n    // the session. This allows us to server-render while also using Firebase's\n    // client-side auth functionality.\n\n\n    var _useFirebaseAuth = useFirebaseAuth(),\n        firebaseUser = _useFirebaseAuth.user;\n\n    var AuthUserFromClient = createAuthUser(firebaseUser);\n    var AuthUserFromSession = AuthUserInfo.AuthUser,\n        token = AuthUserInfo.token;\n    var AuthUser = AuthUserFromClient || AuthUserFromSession || null;\n    return __jsx(AuthUserInfoContext.Provider, {\n      value: {\n        AuthUser: AuthUser,\n        token: token\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, __jsx(ComposedComponent, _extends({}, otherProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  _s(WithAuthUserComp, \"0B+C9kzWNEkpsNPGIANKq0tWeMs=\", false, function () {\n    return [useFirebaseAuth];\n  });\n\n  WithAuthUserComp.getInitialProps = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var req, res, AuthUserInfo, _require, addSession, jsonData, composedInitialProps;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              req = ctx.req, res = ctx.res; // Get the AuthUserInfo object.\n\n              if (false) {\n                // If server-side, get AuthUserInfo from the session in the request.\n                // Don't include server middleware in the client JS bundle. See:\n                // https://arunoda.me/blog/ssr-and-server-only-modules\n                _require = require(\"../middleware/cookieSession\"), addSession = _require.addSession;\n                addSession(req, res);\n                AuthUserInfo = createAuthUserInfo({\n                  firebaseUser: get(req, \"session.decodedToken\", null),\n                  token: get(req, \"session.token\", null)\n                });\n              } else {\n                // If client-side, get AuthUserInfo from stored data. We store it\n                // in _document.js. See:\n                // https://github.com/vercel/next.js/issues/2252#issuecomment-353992669\n                try {\n                  jsonData = JSON.parse(window.document.getElementById(\"__MY_AUTH_USER_INFO\").textContent);\n\n                  if (jsonData) {\n                    AuthUserInfo = jsonData;\n                  } else {\n                    // Use the default (unauthed) user info if there's no data.\n                    AuthUserInfo = createAuthUserInfo();\n                  }\n                } catch (e) {\n                  // If there's some error, use the default (unauthed) user info.\n                  AuthUserInfo = createAuthUserInfo();\n                }\n              } // Explicitly add the user to a custom prop in the getInitialProps\n              // context for ease of use in child components.\n\n\n              set(ctx, \"myCustomData.AuthUserInfo\", AuthUserInfo); // Evaluate the composed component's getInitialProps().\n\n              composedInitialProps = {};\n\n              if (!ComposedComponent.getInitialProps) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 7;\n              return ComposedComponent.getInitialProps(ctx);\n\n            case 7:\n              composedInitialProps = _context.sent;\n\n            case 8:\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, composedInitialProps), {}, {\n                AuthUserInfo: AuthUserInfo\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  WithAuthUserComp.displayName = \"WithAuthUser(\".concat(ComposedComponent.displayName, \")\");\n  WithAuthUserComp.propTypes = {\n    AuthUserInfo: PropTypes.shape({\n      AuthUser: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        emailVerified: PropTypes.bool.isRequired\n      }),\n      token: PropTypes.string\n    }).isRequired\n  };\n  WithAuthUserComp.defaultProps = {};\n  return WithAuthUserComp;\n}","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/utils/pageWrappers/withAuthUser.js"],"names":["React","PropTypes","get","set","AuthUserInfoContext","useFirebaseAuth","createAuthUser","createAuthUserInfo","withAuthUser","ComposedComponent","WithAuthUserComp","props","console","log","AuthUserInfo","otherProps","firebaseUser","user","AuthUserFromClient","AuthUserFromSession","AuthUser","token","getInitialProps","ctx","req","res","require","addSession","jsonData","JSON","parse","window","document","getElementById","textContent","e","composedInitialProps","displayName","propTypes","shape","id","string","isRequired","email","emailVerified","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { get, set } from \"lodash/object\";\nimport { AuthUserInfoContext, useFirebaseAuth } from \"../auth/hooks\";\nimport { createAuthUser, createAuthUserInfo } from \"../auth/user\";\n\n// Gets the authenticated user from the Firebase JS SDK, when client-side,\n// or from the request object, when server-side. Add the AuthUserInfo to\n// context.\nexport default function withAuthUser(ComposedComponent) {\n  const WithAuthUserComp = (props) => {\n    console.log(props);\n\n    const { AuthUserInfo, ...otherProps } = props;\n\n    // We'll use the authed user from client-side auth (Firebase JS SDK)\n    // when available. On the server side, we'll use the authed user from\n    // the session. This allows us to server-render while also using Firebase's\n    // client-side auth functionality.\n    const { user: firebaseUser } = useFirebaseAuth();\n    const AuthUserFromClient = createAuthUser(firebaseUser);\n    const { AuthUser: AuthUserFromSession, token } = AuthUserInfo;\n    const AuthUser = AuthUserFromClient || AuthUserFromSession || null;\n\n    return (\n      <AuthUserInfoContext.Provider value={{ AuthUser, token }}>\n        <ComposedComponent {...otherProps} />\n      </AuthUserInfoContext.Provider>\n    );\n  };\n\n  WithAuthUserComp.getInitialProps = async (ctx) => {\n    const { req, res } = ctx;\n\n    // Get the AuthUserInfo object.\n    let AuthUserInfo;\n    if (typeof window === \"undefined\") {\n      // If server-side, get AuthUserInfo from the session in the request.\n      // Don't include server middleware in the client JS bundle. See:\n      // https://arunoda.me/blog/ssr-and-server-only-modules\n      const { addSession } = require(\"../middleware/cookieSession\");\n      addSession(req, res);\n      AuthUserInfo = createAuthUserInfo({\n        firebaseUser: get(req, \"session.decodedToken\", null),\n        token: get(req, \"session.token\", null),\n      });\n    } else {\n      // If client-side, get AuthUserInfo from stored data. We store it\n      // in _document.js. See:\n      // https://github.com/vercel/next.js/issues/2252#issuecomment-353992669\n      try {\n        const jsonData = JSON.parse(\n          window.document.getElementById(\"__MY_AUTH_USER_INFO\").textContent\n        );\n        if (jsonData) {\n          AuthUserInfo = jsonData;\n        } else {\n          // Use the default (unauthed) user info if there's no data.\n          AuthUserInfo = createAuthUserInfo();\n        }\n      } catch (e) {\n        // If there's some error, use the default (unauthed) user info.\n        AuthUserInfo = createAuthUserInfo();\n      }\n    }\n\n    // Explicitly add the user to a custom prop in the getInitialProps\n    // context for ease of use in child components.\n    set(ctx, \"myCustomData.AuthUserInfo\", AuthUserInfo);\n\n    // Evaluate the composed component's getInitialProps().\n    let composedInitialProps = {};\n    if (ComposedComponent.getInitialProps) {\n      composedInitialProps = await ComposedComponent.getInitialProps(ctx);\n    }\n\n    return {\n      ...composedInitialProps,\n      AuthUserInfo,\n    };\n  };\n\n  WithAuthUserComp.displayName = `WithAuthUser(${ComposedComponent.displayName})`;\n\n  WithAuthUserComp.propTypes = {\n    AuthUserInfo: PropTypes.shape({\n      AuthUser: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        emailVerified: PropTypes.bool.isRequired,\n      }),\n      token: PropTypes.string,\n    }).isRequired,\n  };\n\n  WithAuthUserComp.defaultProps = {};\n\n  return WithAuthUserComp;\n}\n"]},"metadata":{},"sourceType":"module"}