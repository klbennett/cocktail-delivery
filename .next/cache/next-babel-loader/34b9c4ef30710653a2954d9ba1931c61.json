{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport const deleteFavourite = async favId => {\n  console.log(favId.idDrink);\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase.firestore().collection(\"favs\").where(\"userId\", \"==\", userId).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        console.log(snapshot);\n      });\n    }).catch(error => {\n      console.error(\"Error deleting document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\nexport const addFavourite = fav => {\n  initFirebase(); // console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(() => {\n      console.log(\"Successfully added favourite!\");\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport const getFavourites = async () => {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    let favs = [];\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        favs.push(doc.data().fav);\n      });\n      console.log(favs);\n      return favs;\n    }).catch(err => {\n      console.log(\"Error getting documents\", err);\n    });\n    return userFavs;\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/Development/react-ecommerce/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","deleteFavourite","favId","console","log","idDrink","auth","currentUser","userId","uid","userFavs","firestore","collection","where","get","then","snapshot","forEach","doc","catch","error","addFavourite","fav","add","user","timestamp","FieldValue","serverTimestamp","getFavourites","favs","push","data","err"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const deleteFavourite = async (favId) => {\n  console.log(favId.idDrink);\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"userId\", \"==\", userId)\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          console.log(snapshot);\n        });\n      })\n      .catch((error) => {\n        console.error(\"Error deleting document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  // console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = async () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    let favs = [];\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          favs.push(doc.data().fav);\n        });\n        console.log(favs);\n        return favs;\n      })\n      .catch((err) => {\n        console.log(\"Error getting documents\", err);\n      });\n    return userFavs;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}