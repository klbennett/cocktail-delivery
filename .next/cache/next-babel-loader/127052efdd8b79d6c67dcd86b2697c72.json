{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nimport { useUser } from \"../utils/auth/useUser\";\nexport var deleteFavourite = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fav) {\n    var userId, userFavs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            initFirebase();\n\n            if (!firebase.auth().currentUser) {\n              _context.next = 8;\n              break;\n            }\n\n            userId = firebase.auth().currentUser.uid;\n            _context.next = 5;\n            return firebase.firestore().collection(\"favs\").get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                if (doc.data().fav.idDrink === fav.idDrink) {\n                  console.log(doc.id, \"=>\", doc.data());\n                  doc.ref[\"delete\"]().then(console.log(\"deleted \" + fav.strDrink));\n                }\n              });\n            })[\"catch\"](function (error) {\n              console.error(\"Error deleting document: \", error);\n            });\n\n          case 5:\n            userFavs = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 8:\n            console.log(\"There is no current user\");\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function deleteFavourite(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var getFavourites = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var favs, userId, userFavs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            initFirebase();\n\n            if (!firebase.auth().currentUser) {\n              _context2.next = 8;\n              break;\n            }\n\n            favs = [];\n            userId = firebase.auth().currentUser.uid;\n            _context2.next = 6;\n            return firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                favs.push(doc.data().fav);\n              });\n              console.log(favs);\n              return favs;\n            })[\"catch\"](function (err) {\n              console.log(\"Error getting documents\", err);\n            });\n\n          case 6:\n            userFavs = _context2.sent;\n            return _context2.abrupt(\"return\", userFavs);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getFavourites() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}