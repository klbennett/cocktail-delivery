{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n  firebase.firestore().collection(\"favs\").add({\n    fav: fav,\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  }).then(function () {\n    console.log(\"Successfully added favourite!\");\n  })[\"catch\"](function (error) {\n    console.error(\"Error adding document: \", error);\n  });\n}; //This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\n\nexport var fetchFavs = function fetchFavs() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              firebase // .firestore()\n              .collection(\"favs\").orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(function (snapshot) {\n                var newState = {\n                  favs: []\n                };\n                snapshot.forEach(function (doc) {\n                  newState.posts.push({\n                    id: doc.id,\n                    post: doc.data().post\n                  });\n                });\n                dispatch({\n                  type: FETCH_POSTS,\n                  payload: newState\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","firestore","collection","add","timestamp","FieldValue","serverTimestamp","then","console","log","error","fetchFavs","dispatch","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","posts","push","id","post","data","type","FETCH_POSTS","payload"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACnCF,EAAAA,YAAY;AACZD,EAAAA,QAAQ,CACLI,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHH,IAAAA,GAAG,EAAEA,GADF;AAEHI,IAAAA,SAAS,EAAEP,QAAQ,CAACI,SAAT,CAAmBI,UAAnB,CAA8BC,eAA9B;AAFR,GAHP,EAOGC,IAPH,CAOQ,YAAM;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,GATH,WAUS,UAACC,KAAD,EAAW;AAChBF,IAAAA,OAAO,CAACE,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,GAZH;AAaD,CAfM,C,CAiBP;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA,wEAAM,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAC7Bf,cAAAA,QAAQ,CACN;AADM,eAELK,UAFH,CAEc,MAFd,EAGGW,OAHH,CAGW,WAHX,EAGwB,MAHxB,EAIGC,KAJH,CAIS,EAJT,EAKGC,UALH,CAKc,UAACC,QAAD,EAAc;AACxB,oBAAIC,QAAQ,GAAG;AACbC,kBAAAA,IAAI,EAAE;AADO,iBAAf;AAIAF,gBAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,kBAAAA,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAoB;AAClBC,oBAAAA,EAAE,EAAEH,GAAG,CAACG,EADU;AAElBC,oBAAAA,IAAI,EAAEJ,GAAG,CAACK,IAAJ,GAAWD;AAFC,mBAApB;AAID,iBALD;AAOAZ,gBAAAA,QAAQ,CAAC;AACPc,kBAAAA,IAAI,EAAEC,WADC;AAEPC,kBAAAA,OAAO,EAAEX;AAFF,iBAAD,CAAR;AAID,eArBH;;AAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n  firebase\n    .firestore()\n    .collection(\"favs\")\n    .add({\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(() => {\n      console.log(\"Successfully added favourite!\");\n    })\n    .catch((error) => {\n      console.error(\"Error adding document: \", error);\n    });\n};\n\n//This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\nexport const fetchFavs = () => async (dispatch) => {\n  firebase\n    // .firestore()\n    .collection(\"favs\")\n    .orderBy(\"timestamp\", \"desc\")\n    .limit(50)\n    .onSnapshot((snapshot) => {\n      let newState = {\n        favs: [],\n      };\n\n      snapshot.forEach(function (doc) {\n        newState.posts.push({\n          id: doc.id,\n          post: doc.data().post,\n        });\n      });\n\n      dispatch({\n        type: FETCH_POSTS,\n        payload: newState,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}