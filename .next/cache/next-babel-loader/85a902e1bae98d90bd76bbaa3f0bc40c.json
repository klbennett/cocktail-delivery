{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nimport { useUser } from \"../utils/auth/useUser\";\nexport var deleteFavourite = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fav) {\n    var userId, userFavs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            initFirebase();\n\n            if (!firebase.auth().currentUser) {\n              _context.next = 8;\n              break;\n            }\n\n            userId = firebase.auth().currentUser.uid;\n            _context.next = 5;\n            return firebase.firestore().collection(\"favs\").get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                if (doc.data().fav.idDrink === fav.idDrink) {\n                  console.log(doc.id, \"=>\", doc.data());\n                  doc.ref[\"delete\"]().then(console.log(\"deleted \" + fav.strDrink));\n                }\n              });\n            })[\"catch\"](function (error) {\n              console.error(\"Error deleting document: \", error);\n            });\n\n          case 5:\n            userFavs = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 8:\n            console.log(\"There is no current user\");\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function deleteFavourite(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addFavourite = function addFavourite(fav) {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    var userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      console.log(\"Successfully added favourite!\");\n    })[\"catch\"](function (error) {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport var getFavourites = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var favs, userId, userFavs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            initFirebase();\n\n            if (!firebase.auth().currentUser) {\n              _context2.next = 8;\n              break;\n            }\n\n            favs = [];\n            userId = firebase.auth().currentUser.uid;\n            _context2.next = 6;\n            return firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                favs.push(doc.data().fav);\n              });\n              console.log(favs);\n              return favs;\n            })[\"catch\"](function (err) {\n              console.log(\"Error getting documents\", err);\n            });\n\n          case 6:\n            userFavs = _context2.sent;\n            return _context2.abrupt(\"return\", userFavs);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getFavourites() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/kaybennett/Development/react-ecommerce/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","useUser","deleteFavourite","fav","auth","currentUser","userId","uid","firestore","collection","get","then","snapshot","forEach","doc","data","idDrink","console","log","id","ref","strDrink","error","userFavs","addFavourite","add","user","timestamp","FieldValue","serverTimestamp","getFavourites","favs","where","push","err"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AAEA,OAAO,IAAMC,eAAe;AAAA,sEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BH,YAAAA,YAAY;;AADiB,iBAEzBD,QAAQ,CAACK,IAAT,GAAgBC,WAFS;AAAA;AAAA;AAAA;;AAGrBC,YAAAA,MAHqB,GAGZP,QAAQ,CAACK,IAAT,GAAgBC,WAAhB,CAA4BE,GAHhB;AAAA;AAAA,mBAINR,QAAQ,CAC1BS,SADkB,GAElBC,UAFkB,CAEP,MAFO,EAGlBC,GAHkB,GAIlBC,IAJkB,CAIb,UAACC,QAAD,EAAc;AAClBA,cAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxB,oBAAIA,GAAG,CAACC,IAAJ,GAAWZ,GAAX,CAAea,OAAf,KAA2Bb,GAAG,CAACa,OAAnC,EAA4C;AAC1CC,kBAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,EAAhB,EAAoB,IAApB,EAA0BL,GAAG,CAACC,IAAJ,EAA1B;AACAD,kBAAAA,GAAG,CAACM,GAAJ,aAAiBT,IAAjB,CAAsBM,OAAO,CAACC,GAAR,CAAY,aAAaf,GAAG,CAACkB,QAA7B,CAAtB;AACD;AACF,eALD;AAMD,aAXkB,WAYZ,UAACC,KAAD,EAAW;AAChBL,cAAAA,OAAO,CAACK,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD,aAdkB,CAJM;;AAAA;AAIvBC,YAAAA,QAJuB;AAAA;AAAA;;AAAA;AAoB3BN,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AApB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfhB,eAAe;AAAA;AAAA;AAAA,GAArB;AAwBP,OAAO,IAAMsB,YAAY,GAAG,SAAfA,YAAe,CAACrB,GAAD,EAAS;AACnCH,EAAAA,YAAY;;AACZ,MAAID,QAAQ,CAACK,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,QAAMC,MAAM,GAAGP,QAAQ,CAACK,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAR,IAAAA,QAAQ,CACLS,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGgB,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEpB,MADH;AAEHH,MAAAA,GAAG,EAAEA,GAFF;AAGHwB,MAAAA,SAAS,EAAE5B,QAAQ,CAACS,SAAT,CAAmBoB,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGlB,IARH,CAQQ,YAAM;AACVM,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,WAWS,UAACI,KAAD,EAAW;AAChBL,MAAAA,OAAO,CAACK,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLL,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CArBM,C,CAuBP;AACA;AACA;;AACA,OAAO,IAAMY,aAAa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B9B,YAAAA,YAAY;;AADe,iBAEvBD,QAAQ,CAACK,IAAT,GAAgBC,WAFO;AAAA;AAAA;AAAA;;AAGrB0B,YAAAA,IAHqB,GAGd,EAHc;AAInBzB,YAAAA,MAJmB,GAIVP,QAAQ,CAACK,IAAT,GAAgBC,WAAhB,CAA4BE,GAJlB;AAAA;AAAA,mBAKJR,QAAQ,CAC1BS,SADkB,GAElBC,UAFkB,CAEP,MAFO,EAGlBuB,KAHkB,CAGZ,MAHY,EAGJ,IAHI,EAGE1B,MAHF,EAIlBI,GAJkB,GAKlBC,IALkB,CAKb,UAACC,QAAD,EAAc;AAClBA,cAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBiB,gBAAAA,IAAI,CAACE,IAAL,CAAUnB,GAAG,CAACC,IAAJ,GAAWZ,GAArB;AACD,eAFD;AAGAc,cAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AACA,qBAAOA,IAAP;AACD,aAXkB,WAYZ,UAACG,GAAD,EAAS;AACdjB,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCgB,GAAvC;AACD,aAdkB,CALI;;AAAA;AAKrBX,YAAAA,QALqB;AAAA,8CAoBlBA,QApBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbO,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nimport { useUser } from \"../utils/auth/useUser\";\n\nexport const deleteFavourite = async (fav) => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          if (doc.data().fav.idDrink === fav.idDrink) {\n            console.log(doc.id, \"=>\", doc.data());\n            doc.ref.delete().then(console.log(\"deleted \" + fav.strDrink));\n          }\n        });\n      })\n      .catch((error) => {\n        console.error(\"Error deleting document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = async () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    let favs = [];\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          favs.push(doc.data().fav);\n        });\n        console.log(favs);\n        return favs;\n      })\n      .catch((err) => {\n        console.log(\"Error getting documents\", err);\n      });\n    return userFavs;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}