{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport const deleteFavourite = favId => {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    const userFavs = firebase.firestore().collection(\"favs\").where(\"userId\", \"==\", userId);\n    favId.get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        console.log(doc); // doc.ref.delete();\n      });\n    }).then(() => {\n      console.log(\"Successfully added favourite!\");\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\nexport const addFavourite = fav => {\n  initFirebase(); // console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(() => {\n      console.log(\"Successfully added favourite!\");\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"There is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport const getFavourites = async () => {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    let favs = [];\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        favs.push(doc.data().fav);\n      });\n      console.log(favs);\n      return favs;\n    }).catch(err => {\n      console.log(\"Error getting documents\", err);\n    });\n    return userFavs;\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","deleteFavourite","favId","auth","currentUser","userId","uid","userFavs","firestore","collection","where","get","then","querySnapshot","forEach","doc","console","log","catch","error","addFavourite","fav","add","user","timestamp","FieldValue","serverTimestamp","getFavourites","favs","snapshot","push","data","err"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const deleteFavourite = (favId) => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    const userFavs = firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"userId\", \"==\", userId);\n    favId\n      .get()\n      .then(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          console.log(doc);\n          // doc.ref.delete();\n        });\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  // console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"There is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = async () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    let favs = [];\n    const userId = firebase.auth().currentUser.uid;\n    let userFavs = await firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          favs.push(doc.data().fav);\n        });\n        console.log(favs);\n        return favs;\n      })\n      .catch((err) => {\n        console.log(\"Error getting documents\", err);\n      });\n    return userFavs;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}