{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\nexport const addFavourite = fav => {\n  initFirebase();\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase.firestore().collection(\"favs\").add({\n      user: userId,\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(() => {\n      console.log(\"Successfully added favourite!\");\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\n\nexport const getFavourites = () => {\n  initFirebase();\n\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    console.log(userId);\n    firebase.firestore().collection(\"favs\").doc(req.query.name).get().then(doc => {\n      res.json(doc.data());\n    }).catch(error => {\n      res.json({\n        error\n      });\n    });\n    firebase.firestore().collection(\"favs\").where(\"user\", \"==\", userId).get().then(doc => {\n      if (!doc.exists) {\n        console.log(\"No such document!\");\n      } else {\n        console.log(\"Document data:\", doc.data());\n      }\n    }).catch(err => {\n      console.log(\"Error getting document\", err);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","addFavourite","fav","console","log","auth","currentUser","userId","uid","firestore","collection","add","user","timestamp","FieldValue","serverTimestamp","then","catch","error","getFavourites","doc","req","query","name","get","res","json","data","where","exists","err"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAS;AACnCF,EAAAA,YAAY;AAEZG,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAAT,GAAgBC,WAA5B;;AACA,MAAIP,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,UAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAT,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHC,MAAAA,IAAI,EAAEL,MADH;AAEHL,MAAAA,GAAG,EAAEA,GAFF;AAGHW,MAAAA,SAAS,EAAEd,QAAQ,CAACU,SAAT,CAAmBK,UAAnB,CAA8BC,eAA9B;AAHR,KAHP,EAQGC,IARH,CAQQ,MAAM;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KAVH,EAWGa,KAXH,CAWUC,KAAD,IAAW;AAChBf,MAAAA,OAAO,CAACe,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAbH;AAcD,GAhBD,MAgBO;AACLf,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CAvBM,C,CAyBP;AACA;AACA;;AACA,OAAO,MAAMe,aAAa,GAAG,MAAM;AACjCnB,EAAAA,YAAY;;AACZ,MAAID,QAAQ,CAACM,IAAT,GAAgBC,WAApB,EAAiC;AAC/B,UAAMC,MAAM,GAAGR,QAAQ,CAACM,IAAT,GAAgBC,WAAhB,CAA4BE,GAA3C;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAEAR,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGU,GAHH,CAGOC,GAAG,CAACC,KAAJ,CAAUC,IAHjB,EAIGC,GAJH,GAKGR,IALH,CAKSI,GAAD,IAAS;AACbK,MAAAA,GAAG,CAACC,IAAJ,CAASN,GAAG,CAACO,IAAJ,EAAT;AACD,KAPH,EAQGV,KARH,CAQUC,KAAD,IAAW;AAChBO,MAAAA,GAAG,CAACC,IAAJ,CAAS;AAAER,QAAAA;AAAF,OAAT;AACD,KAVH;AAYAnB,IAAAA,QAAQ,CACLU,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGkB,KAHH,CAGS,MAHT,EAGiB,IAHjB,EAGuBrB,MAHvB,EAIGiB,GAJH,GAKGR,IALH,CAKSI,GAAD,IAAS;AACb,UAAI,CAACA,GAAG,CAACS,MAAT,EAAiB;AACf1B,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BgB,GAAG,CAACO,IAAJ,EAA9B;AACD;AACF,KAXH,EAYGV,KAZH,CAYUa,GAAD,IAAS;AACd3B,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC0B,GAAtC;AACD,KAdH;AAeD;AACF,CAlCM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nexport const addFavourite = (fav) => {\n  initFirebase();\n\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        user: userId,\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch data.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new entries fill in they are added to the top.\nexport const getFavourites = () => {\n  initFirebase();\n  if (firebase.auth().currentUser) {\n    const userId = firebase.auth().currentUser.uid;\n    console.log(userId);\n\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .doc(req.query.name)\n      .get()\n      .then((doc) => {\n        res.json(doc.data());\n      })\n      .catch((error) => {\n        res.json({ error });\n      });\n\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .where(\"user\", \"==\", userId)\n      .get()\n      .then((doc) => {\n        if (!doc.exists) {\n          console.log(\"No such document!\");\n        } else {\n          console.log(\"Document data:\", doc.data());\n        }\n      })\n      .catch((err) => {\n        console.log(\"Error getting document\", err);\n      });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}