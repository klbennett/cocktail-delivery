{"ast":null,"code":"var _jsxFileName = \"/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/components/CocktailsList.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Card from \"../components/Card\";\nimport CocktailDetails from \"../components/CocktailDetail\";\nimport CocktailDetail from \"../components/CocktailDetail\";\n\nfunction CocktailsList({\n  drinks\n}) {\n  const {\n    0: selectedDrink,\n    1: setSelectedDrink\n  } = useState(drinks.drinks[0]);\n\n  function setDetailsVisible(id) {\n    const drink = drinks.drinks.find(drink => drink.idDrink === id);\n    setSelectedDrink(drink);\n  }\n\n  function saveDrink(id) {\n    // drink is saved to user in Firebase\n    saveSelectedDrink(drink);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    class: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    class: \"col s12 m8 l9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, drinks.drinks && drinks.drinks.map(({\n    idDrink,\n    strDrinkThumb,\n    strDrink,\n    strIBA,\n    strAlcoholic\n  }) => __jsx(Card, {\n    id: idDrink,\n    strDrinkThumb: strDrinkThumb,\n    strDrink: strDrink,\n    strIBA: strIBA,\n    strAlcoholic: strAlcoholic,\n    selectDrink: e => setDetailsVisible(idDrink),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }))), __jsx(\"div\", {\n    class: \"col s12 m4 l3 grey lighten-2 full-height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(CocktailDetail, {\n    selectedDrink: selectedDrink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }))));\n}\n\nCocktailsList.getInitialProps = async ctx => {\n  // Get the AuthUserInfo object. This is set in `withAuthUser.js`.\n  // The AuthUserInfo object is available on both the server and client.\n  const AuthUserInfo = get(ctx, \"myCustomData.AuthUserInfo\", null);\n  const AuthUser = get(AuthUserInfo, \"AuthUser\", null); // You can also get the token (e.g., to authorize a request when fetching data)\n  // const AuthUserToken = get(AuthUserInfo, 'token', null)\n  // You can fetch data here.\n\n  const data = await mockFetchData(get(AuthUser, \"id\"));\n  return {\n    data\n  };\n};\n\nCocktailsList.displayName = \"CocktailsList\";\nCocktailsList.propTypes = {\n  AuthUserInfo: PropTypes.shape({\n    AuthUser: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      emailVerified: PropTypes.bool.isRequired\n    }),\n    token: PropTypes.string\n  }),\n  drinks: PropTypes.shape().isRequired\n};\nCocktailsList.defaultProps = {\n  AuthUserInfo: null\n};\nexport default withAuthUser(withAuthUserInfo(CocktailsList));","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/components/CocktailsList.js"],"names":["React","useState","Card","CocktailDetails","CocktailDetail","CocktailsList","drinks","selectedDrink","setSelectedDrink","setDetailsVisible","id","drink","find","idDrink","saveDrink","saveSelectedDrink","map","strDrinkThumb","strDrink","strIBA","strAlcoholic","e","getInitialProps","ctx","AuthUserInfo","get","AuthUser","data","mockFetchData","displayName","propTypes","PropTypes","shape","string","isRequired","email","emailVerified","bool","token","defaultProps","withAuthUser","withAuthUserInfo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAmC;AACjC,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCP,QAAQ,CAACK,MAAM,CAACA,MAAP,CAAc,CAAd,CAAD,CAAlD;;AAEA,WAASG,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7B,UAAMC,KAAK,GAAGL,MAAM,CAACA,MAAP,CAAcM,IAAd,CAAoBD,KAAD,IAAWA,KAAK,CAACE,OAAN,KAAkBH,EAAhD,CAAd;AACAF,IAAAA,gBAAgB,CAACG,KAAD,CAAhB;AACD;;AAED,WAASG,SAAT,CAAmBJ,EAAnB,EAAuB;AACrB;AACAK,IAAAA,iBAAiB,CAACJ,KAAD,CAAjB;AACD;;AAED,SACE,4BACE;AAAK,IAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,MAAM,CAACA,MAAP,IACCA,MAAM,CAACA,MAAP,CAAcU,GAAd,CACE,CAAC;AAAEH,IAAAA,OAAF;AAAWI,IAAAA,aAAX;AAA0BC,IAAAA,QAA1B;AAAoCC,IAAAA,MAApC;AAA4CC,IAAAA;AAA5C,GAAD,KACE,MAAC,IAAD;AACE,IAAA,EAAE,EAAEP,OADN;AAEE,IAAA,aAAa,EAAEI,aAFjB;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,MAAM,EAAEC,MAJV;AAKE,IAAA,YAAY,EAAEC,YALhB;AAME,IAAA,WAAW,EAAGC,CAAD,IAAOZ,iBAAiB,CAACI,OAAD,CANvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CADF,EAgBE;AAAK,IAAA,KAAK,EAAC,0CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,aAAa,EAAEN,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBF,CADF,CADF;AAwBD;;AAEDF,aAAa,CAACiB,eAAd,GAAgC,MAAOC,GAAP,IAAe;AAC7C;AACA;AACA,QAAMC,YAAY,GAAGC,GAAG,CAACF,GAAD,EAAM,2BAAN,EAAmC,IAAnC,CAAxB;AACA,QAAMG,QAAQ,GAAGD,GAAG,CAACD,YAAD,EAAe,UAAf,EAA2B,IAA3B,CAApB,CAJ6C,CAM7C;AACA;AAEA;;AACA,QAAMG,IAAI,GAAG,MAAMC,aAAa,CAACH,GAAG,CAACC,QAAD,EAAW,IAAX,CAAJ,CAAhC;AAEA,SAAO;AACLC,IAAAA;AADK,GAAP;AAGD,CAfD;;AAiBAtB,aAAa,CAACwB,WAAd,GAA4B,eAA5B;AAEAxB,aAAa,CAACyB,SAAd,GAA0B;AACxBN,EAAAA,YAAY,EAAEO,SAAS,CAACC,KAAV,CAAgB;AAC5BN,IAAAA,QAAQ,EAAEK,SAAS,CAACC,KAAV,CAAgB;AACxBtB,MAAAA,EAAE,EAAEqB,SAAS,CAACE,MAAV,CAAiBC,UADG;AAExBC,MAAAA,KAAK,EAAEJ,SAAS,CAACE,MAAV,CAAiBC,UAFA;AAGxBE,MAAAA,aAAa,EAAEL,SAAS,CAACM,IAAV,CAAeH;AAHN,KAAhB,CADkB;AAM5BI,IAAAA,KAAK,EAAEP,SAAS,CAACE;AANW,GAAhB,CADU;AASxB3B,EAAAA,MAAM,EAAEyB,SAAS,CAACC,KAAV,GAAkBE;AATF,CAA1B;AAYA7B,aAAa,CAACkC,YAAd,GAA6B;AAC3Bf,EAAAA,YAAY,EAAE;AADa,CAA7B;AAIA,eAAegB,YAAY,CAACC,gBAAgB,CAACpC,aAAD,CAAjB,CAA3B","sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"../components/Card\";\nimport CocktailDetails from \"../components/CocktailDetail\";\nimport CocktailDetail from \"../components/CocktailDetail\";\n\nfunction CocktailsList({ drinks }) {\n  const [selectedDrink, setSelectedDrink] = useState(drinks.drinks[0]);\n\n  function setDetailsVisible(id) {\n    const drink = drinks.drinks.find((drink) => drink.idDrink === id);\n    setSelectedDrink(drink);\n  }\n\n  function saveDrink(id) {\n    // drink is saved to user in Firebase\n    saveSelectedDrink(drink);\n  }\n\n  return (\n    <>\n      <div class=\"row\">\n        <div class=\"col s12 m8 l9\">\n          {drinks.drinks &&\n            drinks.drinks.map(\n              ({ idDrink, strDrinkThumb, strDrink, strIBA, strAlcoholic }) => (\n                <Card\n                  id={idDrink}\n                  strDrinkThumb={strDrinkThumb}\n                  strDrink={strDrink}\n                  strIBA={strIBA}\n                  strAlcoholic={strAlcoholic}\n                  selectDrink={(e) => setDetailsVisible(idDrink)}\n                />\n              )\n            )}\n        </div>\n        <div class=\"col s12 m4 l3 grey lighten-2 full-height\">\n          <CocktailDetail selectedDrink={selectedDrink} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nCocktailsList.getInitialProps = async (ctx) => {\n  // Get the AuthUserInfo object. This is set in `withAuthUser.js`.\n  // The AuthUserInfo object is available on both the server and client.\n  const AuthUserInfo = get(ctx, \"myCustomData.AuthUserInfo\", null);\n  const AuthUser = get(AuthUserInfo, \"AuthUser\", null);\n\n  // You can also get the token (e.g., to authorize a request when fetching data)\n  // const AuthUserToken = get(AuthUserInfo, 'token', null)\n\n  // You can fetch data here.\n  const data = await mockFetchData(get(AuthUser, \"id\"));\n\n  return {\n    data,\n  };\n};\n\nCocktailsList.displayName = \"CocktailsList\";\n\nCocktailsList.propTypes = {\n  AuthUserInfo: PropTypes.shape({\n    AuthUser: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      email: PropTypes.string.isRequired,\n      emailVerified: PropTypes.bool.isRequired,\n    }),\n    token: PropTypes.string,\n  }),\n  drinks: PropTypes.shape().isRequired,\n};\n\nCocktailsList.defaultProps = {\n  AuthUserInfo: null,\n};\n\nexport default withAuthUser(withAuthUserInfo(CocktailsList));\n"]},"metadata":{},"sourceType":"module"}