{"ast":null,"code":"import loadDB from \"../lib/db\"; //This adds the post to firebase cloudstore.\n//User typed data is reset upon success.\n//The failure action is fired but the reducer does not listen for it.\n//This is functionality that should be added in on a featured product.\n//For example, notify user the add failed and they should try again.\n\nexport const addFavourite = fav => async dispatch => {\n  console.log(\"addFavourite\");\n  const db = await loadDB();\n  db.firestore().collection(\"favs\").add({\n    fav: post,\n    idDrink: \"11728\",\n    strDrink: \"Martini\",\n    strCategory: \"Cocktail\",\n    strIBA: \"Unforgettables\",\n    strAlcoholic: true,\n    strGlass: \"Cocktail glass\",\n    ingredients: {\n      \"1\": \"Gin\",\n      \"2\": \"Dry vermouth\",\n      \"3\": \"Olive\"\n    },\n    timestamp: db.firestore.FieldValue.serverTimestamp()\n  }).then(() => {\n    console.log(\"added fav!!\");\n  }).catch(error => {\n    console.error(\"Error adding document: \", error);\n  });\n}; //This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\n\nexport const fetchFavs = () => async dispatch => {\n  const db = await loadDB();\n  db.firestore().collection(\"favs\").orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(snapshot => {\n    let newState = {\n      favs: []\n    };\n    snapshot.forEach(function (doc) {\n      newState.posts.push({\n        id: doc.id,\n        post: doc.data().post\n      });\n    });\n    dispatch({\n      type: FETCH_POSTS,\n      payload: newState\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["loadDB","addFavourite","fav","dispatch","console","log","db","firestore","collection","add","post","idDrink","strDrink","strCategory","strIBA","strAlcoholic","strGlass","ingredients","timestamp","FieldValue","serverTimestamp","then","catch","error","fetchFavs","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","posts","push","id","data","type","FETCH_POSTS","payload"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAS,MAAOC,QAAP,IAAoB;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMC,EAAE,GAAG,MAAMN,MAAM,EAAvB;AAEAM,EAAAA,EAAE,CAACC,SAAH,GACGC,UADH,CACc,MADd,EAEGC,GAFH,CAEO;AACHP,IAAAA,GAAG,EAAEQ,IADF;AAEHC,IAAAA,OAAO,EAAE,OAFN;AAGHC,IAAAA,QAAQ,EAAE,SAHP;AAIHC,IAAAA,WAAW,EAAE,UAJV;AAKHC,IAAAA,MAAM,EAAE,gBALL;AAMHC,IAAAA,YAAY,EAAE,IANX;AAOHC,IAAAA,QAAQ,EAAE,gBAPP;AAQHC,IAAAA,WAAW,EAAE;AACX,WAAK,KADM;AAEX,WAAK,cAFM;AAGX,WAAK;AAHM,KARV;AAaHC,IAAAA,SAAS,EAAEZ,EAAE,CAACC,SAAH,CAAaY,UAAb,CAAwBC,eAAxB;AAbR,GAFP,EAiBGC,IAjBH,CAiBQ,MAAM;AACVjB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAnBH,EAoBGiB,KApBH,CAoBUC,KAAD,IAAW;AAChBnB,IAAAA,OAAO,CAACmB,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,GAtBH;AAuBD,CA3BM,C,CA6BP;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOrB,QAAP,IAAoB;AACjD,QAAMG,EAAE,GAAG,MAAMN,MAAM,EAAvB;AAEAM,EAAAA,EAAE,CAACC,SAAH,GACGC,UADH,CACc,MADd,EAEGiB,OAFH,CAEW,WAFX,EAEwB,MAFxB,EAGGC,KAHH,CAGS,EAHT,EAIGC,UAJH,CAIeC,QAAD,IAAc;AACxB,QAAIC,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAAE;AADO,KAAf;AAIAF,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,MAAAA,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAoB;AAClBC,QAAAA,EAAE,EAAEH,GAAG,CAACG,EADU;AAElBzB,QAAAA,IAAI,EAAEsB,GAAG,CAACI,IAAJ,GAAW1B;AAFC,OAApB;AAID,KALD;AAOAP,IAAAA,QAAQ,CAAC;AACPkC,MAAAA,IAAI,EAAEC,WADC;AAEPC,MAAAA,OAAO,EAAEV;AAFF,KAAD,CAAR;AAID,GApBH;AAqBD,CAxBM","sourcesContent":["import loadDB from \"../lib/db\";\n//This adds the post to firebase cloudstore.\n//User typed data is reset upon success.\n//The failure action is fired but the reducer does not listen for it.\n//This is functionality that should be added in on a featured product.\n//For example, notify user the add failed and they should try again.\nexport const addFavourite = (fav) => async (dispatch) => {\n  console.log(\"addFavourite\");\n  const db = await loadDB();\n\n  db.firestore()\n    .collection(\"favs\")\n    .add({\n      fav: post,\n      idDrink: \"11728\",\n      strDrink: \"Martini\",\n      strCategory: \"Cocktail\",\n      strIBA: \"Unforgettables\",\n      strAlcoholic: true,\n      strGlass: \"Cocktail glass\",\n      ingredients: {\n        \"1\": \"Gin\",\n        \"2\": \"Dry vermouth\",\n        \"3\": \"Olive\",\n      },\n      timestamp: db.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(() => {\n      console.log(\"added fav!!\");\n    })\n    .catch((error) => {\n      console.error(\"Error adding document: \", error);\n    });\n};\n\n//This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\nexport const fetchFavs = () => async (dispatch) => {\n  const db = await loadDB();\n\n  db.firestore()\n    .collection(\"favs\")\n    .orderBy(\"timestamp\", \"desc\")\n    .limit(50)\n    .onSnapshot((snapshot) => {\n      let newState = {\n        favs: [],\n      };\n\n      snapshot.forEach(function (doc) {\n        newState.posts.push({\n          id: doc.id,\n          post: doc.data().post,\n        });\n      });\n\n      dispatch({\n        type: FETCH_POSTS,\n        payload: newState,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}