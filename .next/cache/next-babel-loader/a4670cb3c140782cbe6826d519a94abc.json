{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nconst getCurrentUser = () => {\n  return;\n};\n\nexport const addFavourite = fav => {\n  console.log(firebase.auth().currentUser);\n\n  if (firebase.auth().currentUser) {\n    initFirebase();\n    firebase.firestore().collection(\"favs\").add({\n      fav: fav,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(() => {\n      console.log(\"Successfully added favourite!\");\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n  } else {\n    console.log(\"there is no current user\");\n  }\n}; //This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\n\nexport const fetchFavs = () => async dispatch => {\n  firebase // .firestore()\n  .collection(\"favs\").orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(snapshot => {\n    let newState = {\n      favs: []\n    };\n    snapshot.forEach(function (doc) {\n      newState.posts.push({\n        id: doc.id,\n        post: doc.data().post\n      });\n    });\n    dispatch({\n      type: FETCH_POSTS,\n      payload: newState\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["firebase","initFirebase","getCurrentUser","addFavourite","fav","console","log","auth","currentUser","firestore","collection","add","timestamp","FieldValue","serverTimestamp","then","catch","error","fetchFavs","dispatch","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","posts","push","id","post","data","type","FETCH_POSTS","payload"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B;AACD,CAFD;;AAIA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAS;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,IAAT,GAAgBC,WAA5B;;AACA,MAAIR,QAAQ,CAACO,IAAT,GAAgBC,WAApB,EAAiC;AAC/BP,IAAAA,YAAY;AACZD,IAAAA,QAAQ,CACLS,SADH,GAEGC,UAFH,CAEc,MAFd,EAGGC,GAHH,CAGO;AACHP,MAAAA,GAAG,EAAEA,GADF;AAEHQ,MAAAA,SAAS,EAAEZ,QAAQ,CAACS,SAAT,CAAmBI,UAAnB,CAA8BC,eAA9B;AAFR,KAHP,EAOGC,IAPH,CAOQ,MAAM;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,KATH,EAUGU,KAVH,CAUUC,KAAD,IAAW;AAChBZ,MAAAA,OAAO,CAACY,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,KAZH;AAaD,GAfD,MAeO;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;AACF,CApBM,C,CAsBP;AACA;AACA;;AACA,OAAO,MAAMY,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjDnB,EAAAA,QAAQ,CACN;AADM,GAELU,UAFH,CAEc,MAFd,EAGGU,OAHH,CAGW,WAHX,EAGwB,MAHxB,EAIGC,KAJH,CAIS,EAJT,EAKGC,UALH,CAKeC,QAAD,IAAc;AACxB,QAAIC,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAAE;AADO,KAAf;AAIAF,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,MAAAA,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAoB;AAClBC,QAAAA,EAAE,EAAEH,GAAG,CAACG,EADU;AAElBC,QAAAA,IAAI,EAAEJ,GAAG,CAACK,IAAJ,GAAWD;AAFC,OAApB;AAID,KALD;AAOAZ,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAEC,WADC;AAEPC,MAAAA,OAAO,EAAEX;AAFF,KAAD,CAAR;AAID,GArBH;AAsBD,CAvBM","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport initFirebase from \"../utils/auth/initFirebase\";\n\nconst getCurrentUser = () => {\n  return;\n};\n\nexport const addFavourite = (fav) => {\n  console.log(firebase.auth().currentUser);\n  if (firebase.auth().currentUser) {\n    initFirebase();\n    firebase\n      .firestore()\n      .collection(\"favs\")\n      .add({\n        fav: fav,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      })\n      .then(() => {\n        console.log(\"Successfully added favourite!\");\n      })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n  } else {\n    console.log(\"there is no current user\");\n  }\n};\n\n//This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\nexport const fetchFavs = () => async (dispatch) => {\n  firebase\n    // .firestore()\n    .collection(\"favs\")\n    .orderBy(\"timestamp\", \"desc\")\n    .limit(50)\n    .onSnapshot((snapshot) => {\n      let newState = {\n        favs: [],\n      };\n\n      snapshot.forEach(function (doc) {\n        newState.posts.push({\n          id: doc.id,\n          post: doc.data().post,\n        });\n      });\n\n      dispatch({\n        type: FETCH_POSTS,\n        payload: newState,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}