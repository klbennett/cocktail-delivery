{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport loadDB from \"../lib/db\"; //This adds the post to firebase cloudstore.\n//User typed data is reset upon success.\n//The failure action is fired but the reducer does not listen for it.\n//This is functionality that should be added in on a featured product.\n//For example, notify user the add failed and they should try again.\n\nexport var addFavourite = function addFavourite(fav) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var db;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"addFavourite\");\n              _context.next = 3;\n              return loadDB();\n\n            case 3:\n              db = _context.sent;\n              db.firestore().collection(\"favs\").add({\n                fav: post,\n                idDrink: \"11728\",\n                strDrink: \"Martini\",\n                strCategory: \"Cocktail\",\n                strIBA: \"Unforgettables\",\n                strAlcoholic: true,\n                strGlass: \"Cocktail glass\",\n                ingredients: {\n                  \"1\": \"Gin\",\n                  \"2\": \"Dry vermouth\",\n                  \"3\": \"Olive\"\n                },\n                timestamp: db.firestore.FieldValue.serverTimestamp()\n              }).then(function () {\n                console.log(\"added fav!!\");\n              })[\"catch\"](function (error) {\n                console.error(\"Error adding document: \", error);\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; //This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\n\nexport var fetchFavs = function fetchFavs() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var db;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return loadDB();\n\n            case 2:\n              db = _context2.sent;\n              db.firestore().collection(\"favs\").orderBy(\"timestamp\", \"desc\").limit(50).onSnapshot(function (snapshot) {\n                var newState = {\n                  favs: []\n                };\n                snapshot.forEach(function (doc) {\n                  newState.posts.push({\n                    id: doc.id,\n                    post: doc.data().post\n                  });\n                });\n                dispatch({\n                  type: FETCH_POSTS,\n                  payload: newState\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/lib/actions.js"],"names":["loadDB","addFavourite","fav","dispatch","console","log","db","firestore","collection","add","post","idDrink","strDrink","strCategory","strIBA","strAlcoholic","strGlass","ingredients","timestamp","FieldValue","serverTimestamp","then","error","fetchFavs","orderBy","limit","onSnapshot","snapshot","newState","favs","forEach","doc","posts","push","id","data","type","FETCH_POSTS","payload"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,WAAnB,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA;AAAA,wEAAS,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCC,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADmC;AAAA,qBAElBL,MAAM,EAFY;;AAAA;AAE7BM,cAAAA,EAF6B;AAInCA,cAAAA,EAAE,CAACC,SAAH,GACGC,UADH,CACc,MADd,EAEGC,GAFH,CAEO;AACHP,gBAAAA,GAAG,EAAEQ,IADF;AAEHC,gBAAAA,OAAO,EAAE,OAFN;AAGHC,gBAAAA,QAAQ,EAAE,SAHP;AAIHC,gBAAAA,WAAW,EAAE,UAJV;AAKHC,gBAAAA,MAAM,EAAE,gBALL;AAMHC,gBAAAA,YAAY,EAAE,IANX;AAOHC,gBAAAA,QAAQ,EAAE,gBAPP;AAQHC,gBAAAA,WAAW,EAAE;AACX,uBAAK,KADM;AAEX,uBAAK,cAFM;AAGX,uBAAK;AAHM,iBARV;AAaHC,gBAAAA,SAAS,EAAEZ,EAAE,CAACC,SAAH,CAAaY,UAAb,CAAwBC,eAAxB;AAbR,eAFP,EAiBGC,IAjBH,CAiBQ,YAAM;AACVjB,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,eAnBH,WAoBS,UAACiB,KAAD,EAAW;AAChBlB,gBAAAA,OAAO,CAACkB,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACD,eAtBH;;AAJmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAT;;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB,C,CA6BP;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA,yEAAM,kBAAOpB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACZH,MAAM,EADM;;AAAA;AACvBM,cAAAA,EADuB;AAG7BA,cAAAA,EAAE,CAACC,SAAH,GACGC,UADH,CACc,MADd,EAEGgB,OAFH,CAEW,WAFX,EAEwB,MAFxB,EAGGC,KAHH,CAGS,EAHT,EAIGC,UAJH,CAIc,UAACC,QAAD,EAAc;AACxB,oBAAIC,QAAQ,GAAG;AACbC,kBAAAA,IAAI,EAAE;AADO,iBAAf;AAIAF,gBAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC9BH,kBAAAA,QAAQ,CAACI,KAAT,CAAeC,IAAf,CAAoB;AAClBC,oBAAAA,EAAE,EAAEH,GAAG,CAACG,EADU;AAElBxB,oBAAAA,IAAI,EAAEqB,GAAG,CAACI,IAAJ,GAAWzB;AAFC,mBAApB;AAID,iBALD;AAOAP,gBAAAA,QAAQ,CAAC;AACPiC,kBAAAA,IAAI,EAAEC,WADC;AAEPC,kBAAAA,OAAO,EAAEV;AAFF,iBAAD,CAAR;AAID,eApBH;;AAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import loadDB from \"../lib/db\";\n//This adds the post to firebase cloudstore.\n//User typed data is reset upon success.\n//The failure action is fired but the reducer does not listen for it.\n//This is functionality that should be added in on a featured product.\n//For example, notify user the add failed and they should try again.\nexport const addFavourite = (fav) => async (dispatch) => {\n  console.log(\"addFavourite\");\n  const db = await loadDB();\n\n  db.firestore()\n    .collection(\"favs\")\n    .add({\n      fav: post,\n      idDrink: \"11728\",\n      strDrink: \"Martini\",\n      strCategory: \"Cocktail\",\n      strIBA: \"Unforgettables\",\n      strAlcoholic: true,\n      strGlass: \"Cocktail glass\",\n      ingredients: {\n        \"1\": \"Gin\",\n        \"2\": \"Dry vermouth\",\n        \"3\": \"Olive\",\n      },\n      timestamp: db.firestore.FieldValue.serverTimestamp(),\n    })\n    .then(() => {\n      console.log(\"added fav!!\");\n    })\n    .catch((error) => {\n      console.error(\"Error adding document: \", error);\n    });\n};\n\n//This sets up the listener to fetch posts.\n//This pulls back an initial 50 posts but also sets\n//a listener so as new posts fill in their are added to the top.\nexport const fetchFavs = () => async (dispatch) => {\n  const db = await loadDB();\n\n  db.firestore()\n    .collection(\"favs\")\n    .orderBy(\"timestamp\", \"desc\")\n    .limit(50)\n    .onSnapshot((snapshot) => {\n      let newState = {\n        favs: [],\n      };\n\n      snapshot.forEach(function (doc) {\n        newState.posts.push({\n          id: doc.id,\n          post: doc.data().post,\n        });\n      });\n\n      dispatch({\n        type: FETCH_POSTS,\n        payload: newState,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}