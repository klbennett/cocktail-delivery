{"ast":null,"code":"import cookieSession from \"cookie-session\";\nexport const addSession = (req, res) => {\n  // Ensure that session secrets are set.\n  if (!(process.env.SESSION_SECRET_CURRENT && process.env.SESSION_SECRET_PREVIOUS)) {\n    throw new Error(\"Session secrets must be set as env vars `SESSION_SECRET_CURRENT` and `SESSION_SECRET_PREVIOUS`.\");\n  } // An array is useful for rotating secrets without invalidating old sessions.\n  // The first will be used to sign cookies, and the rest to validate them.\n  // https://github.com/expressjs/cookie-session#keys\n\n\n  const sessionSecrets = [process.env.SESSION_SECRET_CURRENT, process.env.SESSION_SECRET_PREVIOUS]; // Example:\n  // https://github.com/billymoon/micro-cookie-session\n\n  const includeSession = cookieSession({\n    keys: sessionSecrets,\n    // TODO: set other options, such as \"secure\", \"sameSite\", etc.\n    // https://github.com/expressjs/cookie-session#cookie-options\n    maxAge: 604800000,\n    // week\n    httpOnly: true,\n    overwrite: true\n  });\n  includeSession(req, res, () => {});\n};\nexport default function cookieSessionWrapper(handler) {\n  return (req, res) => {\n    try {\n      addSession(req, res);\n    } catch (e) {\n      return res.status(500).json({\n        error: \"Could not get user session.\"\n      });\n    }\n\n    return handler(req, res);\n  };\n}","map":{"version":3,"sources":["/Users/kaybennett/.Trash/nextjs-blog/nextjs-blog/utils/middleware/cookieSession.js"],"names":["cookieSession","addSession","req","res","process","env","SESSION_SECRET_CURRENT","SESSION_SECRET_PREVIOUS","Error","sessionSecrets","includeSession","keys","maxAge","httpOnly","overwrite","cookieSessionWrapper","handler","e","status","json","error"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtC;AACA,MACE,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,IAAsCF,OAAO,CAACC,GAAR,CAAYE,uBAApD,CADF,EAEE;AACA,UAAM,IAAIC,KAAJ,CACJ,iGADI,CAAN;AAGD,GARqC,CAUtC;AACA;AACA;;;AACA,QAAMC,cAAc,GAAG,CACrBL,OAAO,CAACC,GAAR,CAAYC,sBADS,EAErBF,OAAO,CAACC,GAAR,CAAYE,uBAFS,CAAvB,CAbsC,CAkBtC;AACA;;AACA,QAAMG,cAAc,GAAGV,aAAa,CAAC;AACnCW,IAAAA,IAAI,EAAEF,cAD6B;AAEnC;AACA;AACAG,IAAAA,MAAM,EAAE,SAJ2B;AAIhB;AACnBC,IAAAA,QAAQ,EAAE,IALyB;AAMnCC,IAAAA,SAAS,EAAE;AANwB,GAAD,CAApC;AAQAJ,EAAAA,cAAc,CAACR,GAAD,EAAMC,GAAN,EAAW,MAAM,CAAE,CAAnB,CAAd;AACD,CA7BM;AA+BP,eAAe,SAASY,oBAAT,CAA8BC,OAA9B,EAAuC;AACpD,SAAO,CAACd,GAAD,EAAMC,GAAN,KAAc;AACnB,QAAI;AACFF,MAAAA,UAAU,CAACC,GAAD,EAAMC,GAAN,CAAV;AACD,KAFD,CAEE,OAAOc,CAAP,EAAU;AACV,aAAOd,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,WAAOJ,OAAO,CAACd,GAAD,EAAMC,GAAN,CAAd;AACD,GAPD;AAQD","sourcesContent":["import cookieSession from \"cookie-session\";\n\nexport const addSession = (req, res) => {\n  // Ensure that session secrets are set.\n  if (\n    !(process.env.SESSION_SECRET_CURRENT && process.env.SESSION_SECRET_PREVIOUS)\n  ) {\n    throw new Error(\n      \"Session secrets must be set as env vars `SESSION_SECRET_CURRENT` and `SESSION_SECRET_PREVIOUS`.\"\n    );\n  }\n\n  // An array is useful for rotating secrets without invalidating old sessions.\n  // The first will be used to sign cookies, and the rest to validate them.\n  // https://github.com/expressjs/cookie-session#keys\n  const sessionSecrets = [\n    process.env.SESSION_SECRET_CURRENT,\n    process.env.SESSION_SECRET_PREVIOUS,\n  ];\n\n  // Example:\n  // https://github.com/billymoon/micro-cookie-session\n  const includeSession = cookieSession({\n    keys: sessionSecrets,\n    // TODO: set other options, such as \"secure\", \"sameSite\", etc.\n    // https://github.com/expressjs/cookie-session#cookie-options\n    maxAge: 604800000, // week\n    httpOnly: true,\n    overwrite: true,\n  });\n  includeSession(req, res, () => {});\n};\n\nexport default function cookieSessionWrapper(handler) {\n  return (req, res) => {\n    try {\n      addSession(req, res);\n    } catch (e) {\n      return res.status(500).json({ error: \"Could not get user session.\" });\n    }\n    return handler(req, res);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}